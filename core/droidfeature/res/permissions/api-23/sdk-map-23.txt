android.accounts.AccountAuthenticatorActivity.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.accounts.AccountAuthenticatorActivity.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.accounts.AccountAuthenticatorActivity.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.accounts.AccountAuthenticatorActivity.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.accounts.AccountAuthenticatorActivity.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.Activity.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.Activity.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.Activity.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.Activity.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.Activity.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.ActivityGroup.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.ActivityGroup.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.ActivityGroup.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.ActivityGroup.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.ActivityGroup.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.ActivityManager.getRecentTasks(int,int)java.util.List  ::  android.permission.GET_TASKS
android.app.ActivityManager.getRunningAppProcesses()java.util.List  ::  android.permission.GET_TASKS
android.app.ActivityManager.getRunningTasks(int)java.util.List  ::  android.permission.GET_TASKS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void  ::  android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.moveTaskToFront(int,int)void  ::  android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void  ::  android.permission.REORDER_TASKS
android.app.ActivityManager.restartPackage(java.lang.String)void  ::  android.permission.KILL_BACKGROUND_PROCESSES
android.app.AliasActivity.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.AliasActivity.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.AliasActivity.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.AliasActivity.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.AliasActivity.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.Application.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.Application.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.Application.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.Application.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.Application.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.ExpandableListActivity.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.ExpandableListActivity.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.ExpandableListActivity.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.ExpandableListActivity.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.ExpandableListActivity.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void  ::  android.permission.DISABLE_KEYGUARD
android.app.ListActivity.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.ListActivity.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.ListActivity.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.ListActivity.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.ListActivity.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.NativeActivity.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.NativeActivity.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.NativeActivity.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.NativeActivity.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.NativeActivity.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.TabActivity.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.TabActivity.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.TabActivity.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.TabActivity.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.TabActivity.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear()void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.suggestDesiredDimensions(int,int)void  ::  android.permission.SET_WALLPAPER_HINTS
android.app.backup.BackupAgentHelper.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.backup.BackupAgentHelper.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.app.backup.BackupAgentHelper.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.app.backup.BackupAgentHelper.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.backup.BackupAgentHelper.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.bluetooth.BluetoothAdapter.closeProfileProxy(int,android.bluetooth.BluetoothProfile)void  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.disable()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.enable()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getName()java.lang.String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)void  ::  android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)void  ::  android.permission.BLUETOOTH
android.content.ContextWrapper.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.content.ContextWrapper.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.content.ContextWrapper.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.content.ContextWrapper.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.content.ContextWrapper.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.content.MutableContextWrapper.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.content.MutableContextWrapper.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.content.MutableContextWrapper.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.content.MutableContextWrapper.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.content.MutableContextWrapper.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.hardware.ConsumerIrManager.getCarrierFrequencies()android.hardware.ConsumerIrManager$CarrierFrequencyRange[]  ::  android.permission.TRANSMIT_IR
android.hardware.ConsumerIrManager.transmit(int,[int)void  ::  android.permission.TRANSMIT_IR
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean  ::  android.permission.USE_FINGERPRINT
android.inputmethodservice.InputMethodService.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.inputmethodservice.InputMethodService.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.inputmethodservice.InputMethodService.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.inputmethodservice.InputMethodService.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.inputmethodservice.InputMethodService.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getBestProvider(android.location.Criteria,boolean)java.lang.String  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getProvider(java.lang.String)android.location.LocationProvider  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getProviders(android.location.Criteria,boolean)java.util.List  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getProviders(boolean)java.util.List  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeUpdates(android.app.PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeUpdates(android.location.LocationListener)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
android.media.AsyncPlayer.play(android.content.Context,android.net.Uri,boolean,android.media.AudioAttributes)void  ::  android.permission.WAKE_LOCK
android.media.AsyncPlayer.play(android.content.Context,android.net.Uri,boolean,int)void  ::  android.permission.WAKE_LOCK
android.media.AsyncPlayer.stop()void  ::  android.permission.WAKE_LOCK
android.media.AudioManager.setBluetoothScoOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setMicrophoneMute(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setMode(int)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setSpeakerphoneOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.startBluetoothSco()void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.stopBluetoothSco()void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.MediaPlayer.pause()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.release()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.reset()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.setWakeMode(android.content.Context,int)void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.start()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.stop()void  ::  android.permission.WAKE_LOCK
android.media.Ringtone.play()void  ::  android.permission.WAKE_LOCK
android.media.Ringtone.setAudioAttributes(android.media.AudioAttributes)void  ::  android.permission.WAKE_LOCK
android.media.Ringtone.setStreamType(int)void  ::  android.permission.WAKE_LOCK
android.media.Ringtone.stop()void  ::  android.permission.WAKE_LOCK
android.media.RingtoneManager.getRingtone(android.content.Context,android.net.Uri)android.media.Ringtone  ::  android.permission.WAKE_LOCK
android.media.RingtoneManager.getRingtone(int)android.media.Ringtone  ::  android.permission.WAKE_LOCK
android.media.RingtoneManager.stopPreviousRingtone()void  ::  android.permission.WAKE_LOCK
android.net.ConnectivityManager.getActiveNetwork()android.net.Network  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfo()android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworkInfo()android.net.NetworkInfo[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()android.net.Network[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(android.net.Network)android.net.LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network)android.net.NetworkCapabilities  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(android.net.Network)android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(int)android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMetered()boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE
android.net.ConnectivityManager.reportBadNetwork(android.net.Network)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.INTERNET
android.net.ConnectivityManager.reportNetworkConnectivity(android.net.Network,boolean)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.INTERNET
android.net.ConnectivityManager.requestBandwidthUpdate(android.net.Network)boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE
android.net.ConnectivityManager.startUsingNetworkFeature(int,java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE
android.net.VpnService.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.net.VpnService.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.net.VpnService.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.net.VpnService.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.net.VpnService.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.net.sip.SipAudioCall.setSpeakerMode(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.net.sip.SipManager.close(java.lang.String)void  ::  android.permission.USE_SIP
android.net.sip.SipManager.createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)android.net.sip.SipSession  ::  android.permission.USE_SIP
android.net.sip.SipManager.getSessionFor(android.content.Intent)android.net.sip.SipSession  ::  android.permission.USE_SIP
android.net.sip.SipManager.isOpened(java.lang.String)boolean  ::  android.permission.USE_SIP
android.net.sip.SipManager.isRegistered(java.lang.String)boolean  ::  android.permission.USE_SIP
android.net.sip.SipManager.makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)android.net.sip.SipAudioCall  ::  android.permission.USE_SIP
android.net.sip.SipManager.makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)android.net.sip.SipAudioCall  ::  android.permission.USE_SIP
android.net.sip.SipManager.open(android.net.sip.SipProfile)void  ::  android.permission.USE_SIP
android.net.sip.SipManager.open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)void  ::  android.permission.USE_SIP
android.net.sip.SipManager.register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)void  ::  android.permission.USE_SIP
android.net.sip.SipManager.setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)void  ::  android.permission.USE_SIP
android.net.sip.SipManager.takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)android.net.sip.SipAudioCall  ::  android.permission.USE_SIP
android.net.sip.SipManager.unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)void  ::  android.permission.USE_SIP
android.net.wifi.WifiManager.enableNetwork(int,boolean)boolean  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE
android.nfc.NfcAdapter.disableForegroundDispatch(android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.disableForegroundNdefPush(android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,[android.content.IntentFilter,[[java.lang.String)void  ::  android.permission.NFC
android.nfc.NfcAdapter.enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)void  ::  android.permission.NFC
android.nfc.NfcAdapter.invokeBeam(android.app.Activity)boolean  ::  android.permission.NFC
android.nfc.NfcAdapter.setBeamPushUris([android.net.Uri,android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,[android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,[android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,[android.app.Activity)void  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.getAidsForService(android.content.ComponentName,java.lang.String)java.util.List  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.registerAidsForService(android.content.ComponentName,java.lang.String,java.util.List)boolean  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.removeAidsForService(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.setPreferredService(android.app.Activity,android.content.ComponentName)boolean  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.unsetPreferredService(android.app.Activity)boolean  ::  android.permission.NFC
android.nfc.tech.BasicTagTechnology.close()void  ::  android.permission.NFC
android.nfc.tech.BasicTagTechnology.connect()void  ::  android.permission.NFC
android.nfc.tech.IsoDep.close()void  ::  android.permission.NFC
android.nfc.tech.IsoDep.connect()void  ::  android.permission.NFC
android.nfc.tech.IsoDep.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.IsoDep.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.IsoDep.transceive([byte)B[]  ::  android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,[byte)boolean  ::  android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,[byte)boolean  ::  android.permission.NFC
android.nfc.tech.MifareClassic.close()void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.connect()void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.decrement(int,int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.MifareClassic.increment(int,int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.readBlock(int)B[]  ::  android.permission.NFC
android.nfc.tech.MifareClassic.restore(int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.transceive([byte)B[]  ::  android.permission.NFC
android.nfc.tech.MifareClassic.transfer(int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.writeBlock(int,[byte)void  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.close()void  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.connect()void  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.readPages(int)B[]  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.transceive([byte)B[]  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.writePage(int,[byte)void  ::  android.permission.NFC
android.nfc.tech.Ndef.close()void  ::  android.permission.NFC
android.nfc.tech.Ndef.connect()void  ::  android.permission.NFC
android.nfc.tech.Ndef.getNdefMessage()android.nfc.NdefMessage  ::  android.permission.NFC
android.nfc.tech.Ndef.makeReadOnly()boolean  ::  android.permission.NFC
android.nfc.tech.Ndef.writeNdefMessage(android.nfc.NdefMessage)void  ::  android.permission.NFC
android.nfc.tech.NdefFormatable.close()void  ::  android.permission.NFC
android.nfc.tech.NdefFormatable.connect()void  ::  android.permission.NFC
android.nfc.tech.NdefFormatable.format(android.nfc.NdefMessage)void  ::  android.permission.NFC
android.nfc.tech.NdefFormatable.formatReadOnly(android.nfc.NdefMessage)void  ::  android.permission.NFC
android.nfc.tech.NfcA.close()void  ::  android.permission.NFC
android.nfc.tech.NfcA.connect()void  ::  android.permission.NFC
android.nfc.tech.NfcA.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.NfcA.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.NfcA.transceive([byte)B[]  ::  android.permission.NFC
android.nfc.tech.NfcB.close()void  ::  android.permission.NFC
android.nfc.tech.NfcB.connect()void  ::  android.permission.NFC
android.nfc.tech.NfcB.transceive([byte)B[]  ::  android.permission.NFC
android.nfc.tech.NfcBarcode.close()void  ::  android.permission.NFC
android.nfc.tech.NfcBarcode.connect()void  ::  android.permission.NFC
android.nfc.tech.NfcF.close()void  ::  android.permission.NFC
android.nfc.tech.NfcF.connect()void  ::  android.permission.NFC
android.nfc.tech.NfcF.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.NfcF.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.NfcF.transceive([byte)B[]  ::  android.permission.NFC
android.nfc.tech.NfcV.close()void  ::  android.permission.NFC
android.nfc.tech.NfcV.connect()void  ::  android.permission.NFC
android.nfc.tech.NfcV.transceive([byte)B[]  ::  android.permission.NFC
android.os.PowerManager$WakeLock.acquire()void  ::  android.permission.WAKE_LOCK
android.os.PowerManager$WakeLock.acquire(long)void  ::  android.permission.WAKE_LOCK
android.os.PowerManager$WakeLock.release()void  ::  android.permission.WAKE_LOCK
android.os.PowerManager$WakeLock.release(int)void  ::  android.permission.WAKE_LOCK
android.os.PowerManager$WakeLock.setWorkSource(android.os.WorkSource)void  ::  android.permission.WAKE_LOCK
android.os.SystemVibrator.cancel()void  ::  android.permission.VIBRATE
android.os.SystemVibrator.vibrate(int,java.lang.String,[long,int,android.media.AudioAttributes)void  ::  android.permission.VIBRATE
android.os.SystemVibrator.vibrate(int,java.lang.String,long,android.media.AudioAttributes)void  ::  android.permission.VIBRATE
android.service.dreams.DreamService.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.service.dreams.DreamService.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.service.dreams.DreamService.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.service.voice.VoiceInteractionService.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.service.voice.VoiceInteractionService.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.service.voice.VoiceInteractionService.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.service.voice.VoiceInteractionService.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.service.voice.VoiceInteractionService.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.telephony.SmsManager.downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)void  ::  android.permission.RECEIVE_MMS
android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.SmsManager.sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)void  ::  android.permission.SEND_SMS
android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.TelephonyManager.getAllCellInfo()java.util.List  ::  android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation  ::  android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List  ::  android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.listen(android.telephony.PhoneStateListener,int)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE
android.telephony.gsm.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.gsm.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)void  ::  android.permission.SEND_SMS
android.telephony.gsm.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.test.IsolatedContext.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.test.IsolatedContext.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.test.IsolatedContext.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.test.IsolatedContext.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.test.IsolatedContext.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.test.RenamingDelegatingContext.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.test.RenamingDelegatingContext.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.test.RenamingDelegatingContext.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.test.RenamingDelegatingContext.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.test.RenamingDelegatingContext.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.test.mock.MockApplication.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.test.mock.MockApplication.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.test.mock.MockApplication.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.test.mock.MockApplication.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.test.mock.MockApplication.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.view.ContextThemeWrapper.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.view.ContextThemeWrapper.removeStickyBroadcast(android.content.Intent)void  ::  android.permission.BROADCAST_STICKY
android.view.ContextThemeWrapper.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void  ::  android.permission.BROADCAST_STICKY
android.view.ContextThemeWrapper.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.view.ContextThemeWrapper.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.widget.VideoView.getAudioSessionId()int  ::  android.permission.WAKE_LOCK
android.widget.VideoView.onKeyDown(int,android.view.KeyEvent)boolean  ::  android.permission.WAKE_LOCK
android.widget.VideoView.pause()void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.resume()void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.setVideoPath(java.lang.String)void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.setVideoURI(android.net.Uri)void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.setVideoURI(android.net.Uri,java.util.Map)void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.start()void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.stopPlayback()void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.suspend()void  ::  android.permission.WAKE_LOCK
