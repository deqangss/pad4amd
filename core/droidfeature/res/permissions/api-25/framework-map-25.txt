android.hardware.location.ActivityRecognitionHardware.disableActivityEvent(java.lang.String,int)boolean  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ActivityRecognitionHardware.enableActivityEvent(java.lang.String,int,long)boolean  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ActivityRecognitionHardware.flush()boolean  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ActivityRecognitionHardware.getSupportedActivities()java.lang.String[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ActivityRecognitionHardware.isActivitySupported(java.lang.String)boolean  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ActivityRecognitionHardware.registerSink(android.hardware.location.IActivityRecognitionHardwareSink)boolean  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ActivityRecognitionHardware.unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)boolean  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)I[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.getContextHubHandles()I[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.getContextHubInfo(int)android.hardware.location.ContextHubInfo  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.loadNanoApp(int,android.hardware.location.NanoApp)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.registerCallback(android.hardware.location.IContextHubCallback)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.sendMessage(int,int,android.hardware.location.ContextHubMessage)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubService.unloadNanoApp(int)int  ::  android.permission.LOCATION_HARDWARE
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.isA2dpPlaying(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.getAudioConfig(android.bluetooth.BluetoothDevice)android.bluetooth.BluetoothAudioConfig  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.isA2dpPlaying(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.getMetadata(android.bluetooth.BluetoothDevice)android.media.MediaMetadata  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.getPlaybackState(android.bluetooth.BluetoothDevice)android.media.session.PlaybackState  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.getPlayerSettings(android.bluetooth.BluetoothDevice)android.bluetooth.BluetoothAvrcpPlayerSettings  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.sendPassThroughCmd(android.bluetooth.BluetoothDevice,int,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder.setPlayerApplicationSetting(android.bluetooth.BluetoothAvrcpPlayerSettings)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.cancelBondProcess(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.cancelDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.configHciSnoopLog(boolean)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)android.os.ParcelFileDescriptor  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.createBond(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.createBondOutOfBand(android.bluetooth.BluetoothDevice,int,android.bluetooth.OobData)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)android.os.ParcelFileDescriptor  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.disable()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.enable()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.enableNoAutoConnect()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.factoryReset()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.fetchRemoteUuids(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getAdapterConnectionState()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getAddress()java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getBondState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getBondedDevices()android.bluetooth.BluetoothDevice[]  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getDiscoverableTimeout()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getMessageAccessPermission(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getName()java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getPhonebookAccessPermission(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getProfileConnectionState(int)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteAlias(android.bluetooth.BluetoothDevice)java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteClass(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteName(android.bluetooth.BluetoothDevice)java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteType(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteUuids(android.bluetooth.BluetoothDevice)android.os.ParcelUuid[]  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getScanMode()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getSimAccessPermission(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getState()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getUuids()android.os.ParcelUuid[]  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isActivityAndEnergyReportingSupported()boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isDiscovering()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isEnabled()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isMultiAdvertisementSupported()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isOffloadedFilteringSupported()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isOffloadedScanBatchingSupported()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.removeBond(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.reportActivityInfo()android.bluetooth.BluetoothActivityEnergyInfo  ::  android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.requestActivityInfo(android.os.ResultReceiver)void  ::  android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.sdpSearch(android.bluetooth.BluetoothDevice,android.os.ParcelUuid)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setDiscoverableTimeout(int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setMessageAccessPermission(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setName(java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setPasskey(android.bluetooth.BluetoothDevice,boolean,int,[byte)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setPhonebookAccessPermission(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setPin(android.bluetooth.BluetoothDevice,boolean,int,[byte)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setScanMode(int,int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setSimAccessPermission(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.startDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.addCharacteristic(int,android.os.ParcelUuid,int,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.addDescriptor(int,android.os.ParcelUuid,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.addIncludedService(int,int,int,android.os.ParcelUuid)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.beginReliableWrite(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.clearServices(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.clientConnect(int,java.lang.String,boolean,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.clientDisconnect(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.configureMTU(int,java.lang.String,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.connectionParameterUpdate(int,java.lang.String,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.disconnectAll()void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.discoverServices(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.endReliableWrite(int,java.lang.String,boolean)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.endServiceDeclaration(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.numHwTrackFiltersAvailable()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.readCharacteristic(int,java.lang.String,int,int)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.readDescriptor(int,java.lang.String,int,int)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.readRemoteRssi(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.refreshDevice(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.registerForNotification(int,java.lang.String,int,boolean)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.removeService(int,int,int,android.os.ParcelUuid)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,[byte)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.sendResponse(int,java.lang.String,int,int,int,[byte)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.serverConnect(int,java.lang.String,boolean,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.serverDisconnect(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.startMultiAdvertising(int,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseSettings)void  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,android.os.WorkSource,java.util.List,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED, android.permission.PEERS_MAC_ADDRESS, android.permission.UPDATE_DEVICE_STATS
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.stopMultiAdvertising(int)void  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.stopScan(int,boolean)void  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.unregAll()void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.unregisterClient(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.unregisterServer(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.writeCharacteristic(int,java.lang.String,int,int,int,[byte)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.writeDescriptor(int,java.lang.String,int,int,int,[byte)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getConnectedHealthDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getHealthDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)android.os.ParcelFileDescriptor  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.bindResponse(int,boolean)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.clccResponse(int,int,int,int,boolean,java.lang.String,int)void  ::  android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.connectAudio()boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.disableWBS()boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.disconnectAudio()boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.enableWBS()boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.isAudioConnected(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.isAudioOn()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.phoneStateChanged(int,int,int,java.lang.String,int)void  ::  android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.startVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.stopVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.acceptCall(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.connectAudio()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.dial(android.bluetooth.BluetoothDevice,java.lang.String)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.dialMemory(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.disconnectAudio()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.enterPrivateMode(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.explicitCallTransfer(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getCurrentAgEvents(android.bluetooth.BluetoothDevice)android.os.Bundle  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getCurrentAgFeatures(android.bluetooth.BluetoothDevice)android.os.Bundle  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getCurrentCalls(android.bluetooth.BluetoothDevice)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getLastVoiceTagNumber(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.holdCall(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.redial(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.rejectCall(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.sendDTMF(android.bluetooth.BluetoothDevice,byte)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.startVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.stopVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder.terminateCall(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getProtocolMode(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getReport(android.bluetooth.BluetoothDevice,byte,byte,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.sendData(android.bluetooth.BluetoothDevice,java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.setProtocolMode(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.virtualUnplug(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.getClient()android.bluetooth.BluetoothDevice  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.getState()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.isConnected(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.setBluetoothTethering(boolean)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.TETHER_PRIVILEGED
com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.sap.SapService$SapBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.getClient()android.bluetooth.BluetoothDevice  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.getState()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.isConnected(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.sap.SapService$SapBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH
com.android.car.CarRadioService.setPreset(android.car.hardware.radio.CarRadioPreset)boolean  ::  android.car.permission.CAR_RADIO
com.android.car.ICarImpl.getCarService(java.lang.String)android.os.IBinder  ::  android.car.permission.CAR_CAMERA, android.car.permission.CAR_HVAC, android.car.permission.CAR_MOCK_VEHICLE_HAL, android.car.permission.CAR_NAVIGATION_MANAGER, android.car.permission.CAR_PROJECTION, android.car.permission.CAR_RADIO
com.android.car.pm.CarPackageManagerService.setAppBlockingPolicy(java.lang.String,android.car.content.pm.CarAppBlockingPolicy,int)void  ::  android.car.permission.CONTROL_APP_BLOCKING
com.android.internal.telephony.PhoneSubInfoController.getCompleteVoiceMailNumber()java.lang.String  ::  android.permission.CALL_PRIVILEGED
com.android.internal.telephony.PhoneSubInfoController.getCompleteVoiceMailNumberForSubscriber(int)java.lang.String  ::  android.permission.CALL_PRIVILEGED
com.android.internal.telephony.PhoneSubInfoController.getDeviceId(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getDeviceIdForPhone(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getDeviceSvn(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getDeviceSvnUsingSubId(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getGroupIdLevel1(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getGroupIdLevel1ForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIccSerialNumber(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIccSerialNumberForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIccSimChallengeResponse(int,int,int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getImeiForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIsimChallengeResponse(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIsimDomain()java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIsimImpi()java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIsimImpu()java.lang.String[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIsimIst()java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getIsimPcscf()java.lang.String[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getLine1AlphaTag(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getLine1AlphaTagForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getLine1Number(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getLine1NumberForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getMsisdn(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getMsisdnForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getNaiForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getSubscriberId(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getSubscriberIdForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getVoiceMailAlphaTag(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getVoiceMailAlphaTagForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getVoiceMailNumber(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfoController.getVoiceMailNumberForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.addSubInfoRecord(java.lang.String,int)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.clearDefaultsForInactiveSubIds()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.clearSubInfo()int  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getActiveSubInfoCount(java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getActiveSubscriptionInfo(int,java.lang.String)android.telephony.SubscriptionInfo  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getActiveSubscriptionInfoForIccId(java.lang.String,java.lang.String)android.telephony.SubscriptionInfo  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String)android.telephony.SubscriptionInfo  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getActiveSubscriptionInfoList(java.lang.String)java.util.List  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getAllSubInfoCount(java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getAllSubInfoList(java.lang.String)java.util.List  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.getSubscriptionProperty(int,java.lang.String,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setDataRoaming(int,int)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setDefaultDataSubId(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setDefaultSmsSubId(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setDefaultVoiceSubId(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setDisplayName(java.lang.String,int)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setDisplayNameUsingSrc(java.lang.String,int,long)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setDisplayNumber(java.lang.String,int)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setIconTint(int,int)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.SubscriptionController.setSubscriptionProperty(int,java.lang.String,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEf(int)java.util.List  ::  android.permission.READ_CONTACTS
com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEfForSubscriber(int,int)java.util.List  ::  android.permission.READ_CONTACTS
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.UiccSmsController.copyMessageToIccEfForSubscriber(int,java.lang.String,int,[byte,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.internal.telephony.UiccSmsController.disableCellBroadcastForSubscriber(int,int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.UiccSmsController.disableCellBroadcastRangeForSubscriber(int,int,int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.UiccSmsController.enableCellBroadcastForSubscriber(int,int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.UiccSmsController.enableCellBroadcastRangeForSubscriber(int,int,int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.UiccSmsController.getAllMessagesFromIccEfForSubscriber(int,java.lang.String)java.util.List  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.UiccSmsController.sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.UiccSmsController.sendDataForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.UiccSmsController.sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean)void  ::  android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.UiccSmsController.sendStoredMultipartText(int,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)void  ::  android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.UiccSmsController.sendStoredText(int,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.UiccSmsController.sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)void  ::  android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.UiccSmsController.sendTextForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)void  ::  android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.UiccSmsController.updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.phone.CarrierConfigLoader.getConfigForSubId(int)android.os.PersistableBundle  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.CarrierConfigLoader.notifyConfigChangedForSubId(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.CarrierConfigLoader.updateConfigForPhoneId(int,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.answerRingingCall()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.answerRingingCallForSubscriber(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.call(java.lang.String,java.lang.String)void  ::  android.permission.CALL_PHONE
com.android.phone.PhoneInterfaceManager.carrierActionSetMeteredApnsEnabled(int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.carrierActionSetRadioEnabled(int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.disableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.disableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
com.android.phone.PhoneInterfaceManager.disableLocationUpdatesForSubscriber(int)void  ::  android.permission.CONTROL_LOCATION_UPDATES
com.android.phone.PhoneInterfaceManager.enableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.enableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
com.android.phone.PhoneInterfaceManager.enableLocationUpdatesForSubscriber(int)void  ::  android.permission.CONTROL_LOCATION_UPDATES
com.android.phone.PhoneInterfaceManager.enableVideoCalling(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.endCall()boolean  ::  android.permission.CALL_PHONE
com.android.phone.PhoneInterfaceManager.endCallForSubscriber(int)boolean  ::  android.permission.CALL_PHONE
com.android.phone.PhoneInterfaceManager.factoryReset(int)void  ::  android.permission.CONNECTIVITY_INTERNAL, android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getAidForAppType(int,int)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getAllCellInfo(java.lang.String)java.util.List  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.phone.PhoneInterfaceManager.getAllowedCarriers(int)java.util.List  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCalculatedPreferredNetworkType(java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaEriIconIndex(java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaEriIconIndexForSubscriber(int,java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaEriIconMode(java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaEriIconModeForSubscriber(int,java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaEriText(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaEriTextForSubscriber(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaMdn(int)java.lang.String  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaMin(int)java.lang.String  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCdmaPrlVersion(int)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getCellLocation(java.lang.String)android.os.Bundle  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.phone.PhoneInterfaceManager.getCellNetworkScanResults(int)com.android.internal.telephony.CellNetworkScanResult  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getDataEnabled(int)boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.phone.PhoneInterfaceManager.getDataNetworkType(java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getDataNetworkTypeForSubscriber(int,java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getDeviceId(java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getDeviceSoftwareVersionForSlot(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getEsn(int)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getImeiForSlot(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getLine1AlphaTagForDisplay(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getLine1NumberForDisplay(int,java.lang.String)java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getLteOnCdmaMode(java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getLteOnCdmaModeForSubscriber(int,java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getMergedSubscriberIds(java.lang.String)java.lang.String[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getNeighboringCellInfo(java.lang.String)java.util.List  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.phone.PhoneInterfaceManager.getNetworkTypeForSubscriber(int,java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getPcscfAddress(java.lang.String,java.lang.String)java.lang.String[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getPreferredNetworkType(int)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getRadioAccessFamily(int,java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getServiceStateForSubscriber(int,java.lang.String)android.telephony.ServiceState  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getSystemVisualVoicemailSmsFilterSettings(java.lang.String,int)android.telephony.VisualVoicemailSmsFilterSettings  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getTelephonyHistograms()java.util.List  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getTetherApnRequired()int  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getVoiceNetworkTypeForSubscriber(int,java.lang.String)int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.getVtDataUsage()long  ::  android.permission.READ_NETWORK_USAGE_HISTORY
com.android.phone.PhoneInterfaceManager.handlePinMmi(java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.handlePinMmiForSubscriber(int,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.iccCloseLogicalChannel(int,int)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)B[]  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.iccOpenLogicalChannel(int,java.lang.String)android.telephony.IccOpenLogicalChannelResponse  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)java.lang.String  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)java.lang.String  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.invokeOemRilRequestRaw([byte,[byte)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isIdle(java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isIdleForSubscriber(int,java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isOffhook(java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isOffhookForSubscriber(int,java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isRadioOn(java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isRadioOnForSubscriber(int,java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isRinging(java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isRingingForSubscriber(int,java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isVideoCallingEnabled(java.lang.String)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isVisualVoicemailEnabled(java.lang.String,android.telecom.PhoneAccountHandle)boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.phone.PhoneInterfaceManager.nvReadItem(int)java.lang.String  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.nvResetConfig(int)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.nvWriteCdmaPrl([byte)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.nvWriteItem(int,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.requestModemActivityInfo(android.os.ResultReceiver)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.sendEnvelopeWithStatus(int,java.lang.String)java.lang.String  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setAllowedCarriers(int,java.util.List)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setDataEnabled(int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setImsRegistrationState(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setNetworkSelectionModeAutomatic(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setNetworkSelectionModeManual(int,com.android.internal.telephony.OperatorInfo,boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setPolicyDataEnabled(boolean,int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setPreferredNetworkType(int,int)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setRadio(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setRadioForSubscriber(int,boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setRadioPower(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setVisualVoicemailEnabled(java.lang.String,android.telecom.PhoneAccountHandle,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.shutdownMobileRadios()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPin(java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPinForSubscriber(int,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPinReportResult(java.lang.String)I[]  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPinReportResultForSubscriber(int,java.lang.String)I[]  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPuk(java.lang.String,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPukForSubscriber(int,java.lang.String,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPukReportResult(java.lang.String,java.lang.String)I[]  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPukReportResultForSubscriber(int,java.lang.String,java.lang.String)I[]  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.toggleRadioOnOff()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.toggleRadioOnOffForSubscriber(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.providers.contacts.ContactsProvider2.getType(android.net.Uri)java.lang.String  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.AppOpsService.checkAudioOperation(int,int,int,java.lang.String)int  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.checkOperation(int,int,java.lang.String)int  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.finishOperation(android.os.IBinder,int,int,java.lang.String)void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.getOpsForPackage(int,java.lang.String,[int)java.util.List  ::  android.permission.GET_APP_OPS_STATS
com.android.server.AppOpsService.getPackagesForOps([int)java.util.List  ::  android.permission.GET_APP_OPS_STATS
com.android.server.AppOpsService.noteOperation(int,int,java.lang.String)int  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.resetAllModes(int,java.lang.String)void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.setAudioRestriction(int,int,int,int,[java.lang.String)void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.setMode(int,int,java.lang.String,int)void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.setUidMode(int,int,int)void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.setUserRestriction(int,boolean,android.os.IBinder,int,[java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_APP_OPS_RESTRICTIONS
com.android.server.AppOpsService.startOperation(android.os.IBinder,int,int,java.lang.String)int  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.BluetoothManagerService.disable(boolean)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.server.BluetoothManagerService.enable()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.server.BluetoothManagerService.enableNoAutoConnect()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.server.BluetoothManagerService.getAddress()java.lang.String  ::  android.permission.BLUETOOTH, android.permission.LOCAL_MAC_ADDRESS
com.android.server.BluetoothManagerService.getName()java.lang.String  ::  android.permission.BLUETOOTH
com.android.server.BluetoothManagerService.registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)void  ::  android.permission.BLUETOOTH
com.android.server.BluetoothManagerService.unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)void  ::  android.permission.BLUETOOTH
com.android.server.BluetoothManagerService.unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)void  ::  android.permission.BLUETOOTH
com.android.server.ConnectivityService.factoryReset()void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL, android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.TETHER_PRIVILEGED
com.android.server.ConnectivityService.getActiveLinkProperties()android.net.LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getActiveNetwork()android.net.Network  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getActiveNetworkForUid(int,boolean)android.net.Network  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getActiveNetworkInfo()android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getActiveNetworkInfoForUid(int,boolean)android.net.NetworkInfo  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getActiveNetworkQuotaInfo()android.net.NetworkQuotaInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getAllNetworkInfo()android.net.NetworkInfo[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getAllNetworkState()android.net.NetworkState[]  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getAllNetworks()android.net.Network[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getAllVpnInfo()com.android.internal.net.VpnInfo[]  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getAlwaysOnVpnPackage(int)java.lang.String  ::  android.permission.CONNECTIVITY_INTERNAL, android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.ConnectivityService.getDefaultNetworkCapabilitiesForUser(int)android.net.NetworkCapabilities[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getLastTetherError(java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getLegacyVpnInfo(int)com.android.internal.net.LegacyVpnInfo  ::  android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.ConnectivityService.getLinkProperties(android.net.Network)android.net.LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getLinkPropertiesForType(int)android.net.LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getMobileProvisioningUrl()java.lang.String  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getNetworkCapabilities(android.net.Network)android.net.NetworkCapabilities  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getNetworkForType(int)android.net.Network  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getNetworkInfo(int)android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getNetworkInfoForUid(android.net.Network,int,boolean)android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableBluetoothRegexs()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableIfaces()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableUsbRegexs()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableWifiRegexs()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetheredDhcpRanges()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getTetheredIfaces()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetheringErroredIfaces()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getVpnConfig(int)com.android.internal.net.VpnConfig  ::  android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.ConnectivityService.isActiveNetworkMetered()boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.isNetworkSupported(int)boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.isTetheringSupported()boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)android.net.NetworkRequest  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)android.net.NetworkRequest  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL, android.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS
com.android.server.ConnectivityService.prepareVpn(java.lang.String,java.lang.String,int)boolean  ::  android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.ConnectivityService.registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkMisc)int  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.registerNetworkFactory(android.os.Messenger,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.reportInetCondition(int,int)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.INTERNET
com.android.server.ConnectivityService.reportNetworkConnectivity(android.net.Network,boolean)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.INTERNET
com.android.server.ConnectivityService.requestBandwidthUpdate(android.net.Network)boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)android.net.NetworkRequest  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL, android.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS
com.android.server.ConnectivityService.requestRouteToHostAddress(int,[byte)boolean  ::  android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setAcceptUnvalidated(android.net.Network,boolean,boolean)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setAirplaneMode(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setAlwaysOnVpnPackage(int,java.lang.String,boolean)boolean  ::  android.permission.CONNECTIVITY_INTERNAL, android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.ConnectivityService.setAvoidUnvalidated(android.net.Network)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setGlobalProxy(android.net.ProxyInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setProvisioningNotificationVisible(boolean,int,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setUsbTethering(boolean)int  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
com.android.server.ConnectivityService.setVpnPackageAuthorization(java.lang.String,int,boolean)void  ::  android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.ConnectivityService.startLegacyVpn(com.android.internal.net.VpnProfile)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONTROL_VPN
com.android.server.ConnectivityService.startNattKeepalive(android.net.Network,int,android.os.Messenger,android.os.IBinder,java.lang.String,int,java.lang.String)void  ::  android.permission.PACKET_KEEPALIVE_OFFLOAD
com.android.server.ConnectivityService.startTethering(int,android.os.ResultReceiver,boolean)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
com.android.server.ConnectivityService.stopTethering(int)void  ::  android.permission.TETHER_PRIVILEGED
com.android.server.ConnectivityService.tether(java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
com.android.server.ConnectivityService.unregisterNetworkFactory(android.os.Messenger)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.untether(java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
com.android.server.ConnectivityService.updateLockdownVpn()boolean  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConsumerIrService.getCarrierFrequencies()I[]  ::  android.permission.TRANSMIT_IR
com.android.server.ConsumerIrService.transmit(java.lang.String,int,[int)void  ::  android.permission.TRANSMIT_IR
com.android.server.DeviceIdleController$BinderService.addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)void  ::  android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
com.android.server.DeviceIdleController$BinderService.addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)long  ::  android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
com.android.server.DeviceIdleController$BinderService.addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)long  ::  android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
com.android.server.DeviceIdleController$BinderService.addPowerSaveWhitelistApp(java.lang.String)void  ::  android.permission.DEVICE_POWER
com.android.server.DeviceIdleController$BinderService.exitIdle(java.lang.String)void  ::  android.permission.DEVICE_POWER
com.android.server.DeviceIdleController$BinderService.removePowerSaveWhitelistApp(java.lang.String)void  ::  android.permission.DEVICE_POWER
com.android.server.InputMethodManagerService.addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.clearLastInputMethodWindowForTransition(android.os.IBinder)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.createInputContentUriToken(android.os.IBinder,android.net.Uri,java.lang.String)com.android.internal.inputmethod.IInputContentUriToken  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getCurrentInputMethodSubtype()android.view.inputmethod.InputMethodSubtype  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getEnabledInputMethodList()java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getEnabledInputMethodSubtypeList(java.lang.String,boolean)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getInputMethodList()java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getLastInputMethodSubtype()android.view.inputmethod.InputMethodSubtype  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.hideMySoftInput(android.os.IBinder,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.registerSuggestionSpansForNotification([android.text.style.SuggestionSpan)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.removeClient(com.android.internal.view.IInputMethodClient)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.setAdditionalInputMethodSubtypes(java.lang.String,[android.view.inputmethod.InputMethodSubtype)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.setInputMethod(android.os.IBinder,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.setInputMethodEnabled(java.lang.String,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.shouldOfferSwitchingToNextInputMethod(android.os.IBinder)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_EXTERNAL_STORAGE
com.android.server.InputMethodManagerService.showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.showMySoftInput(android.os.IBinder,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int)com.android.internal.view.InputBindResult  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.switchToLastInputMethod(android.os.IBinder)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.switchToNextInputMethod(android.os.IBinder,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.LocationManagerService.addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.getBestProvider(android.location.Criteria,boolean)java.lang.String  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.getLastLocation(android.location.LocationRequest,java.lang.String)android.location.Location  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.getProviderProperties(java.lang.String)com.android.internal.location.ProviderProperties  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.getProviders(android.location.Criteria,boolean)java.util.List  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.reportLocation(android.location.Location,boolean)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.INSTALL_LOCATION_PROVIDER
com.android.server.LocationManagerService.requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.UPDATE_APP_OPS_STATS, android.permission.UPDATE_DEVICE_STATS
com.android.server.LocationManagerService.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
com.android.server.LockSettingsService.checkPassword(java.lang.String,int,com.android.internal.widget.ICheckCredentialProgressCallback)com.android.internal.widget.VerifyCredentialResponse  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.checkPattern(java.lang.String,int,com.android.internal.widget.ICheckCredentialProgressCallback)com.android.internal.widget.VerifyCredentialResponse  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.checkVoldPassword(int)boolean  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.getBoolean(java.lang.String,boolean,int)boolean  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
com.android.server.LockSettingsService.getLong(java.lang.String,long,int)long  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
com.android.server.LockSettingsService.getSeparateProfileChallengeEnabled(int)boolean  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
com.android.server.LockSettingsService.getString(java.lang.String,java.lang.String,int)java.lang.String  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
com.android.server.LockSettingsService.getStrongAuthForUser(int)int  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.requireStrongAuth(int,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.resetKeyStore(int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.setBoolean(java.lang.String,boolean,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.setLockPassword(java.lang.String,java.lang.String,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.setLockPattern(java.lang.String,java.lang.String,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.setLong(java.lang.String,long,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.setSeparateProfileChallengeEnabled(int,boolean,java.lang.String)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.setString(java.lang.String,java.lang.String,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.systemReady()void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
com.android.server.LockSettingsService.unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.userPresent(int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.verifyPassword(java.lang.String,long,int)com.android.internal.widget.VerifyCredentialResponse  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.verifyPattern(java.lang.String,long,int)com.android.internal.widget.VerifyCredentialResponse  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.LockSettingsService.verifyTiedProfileChallenge(java.lang.String,boolean,long,int)com.android.internal.widget.VerifyCredentialResponse  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.server.MmsServiceBroker$BinderService.downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)void  ::  android.permission.RECEIVE_MMS
com.android.server.MmsServiceBroker$BinderService.sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
com.android.server.MountService.addUserKeyAuth(int,int,[byte,[byte)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.benchmark(java.lang.String)long  ::  android.permission.MOUNT_FORMAT_FILESYSTEMS
com.android.server.MountService.changeEncryptionPassword(int,java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.clearPassword()void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)int  ::  android.permission.ASEC_CREATE
com.android.server.MountService.createUserKey(int,int,boolean)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.decryptStorage(java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.destroySecureContainer(java.lang.String,boolean)int  ::  android.permission.ASEC_DESTROY
com.android.server.MountService.destroyUserKey(int)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.destroyUserStorage(java.lang.String,int,int)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.encryptStorage(int,java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.finalizeSecureContainer(java.lang.String)int  ::  android.permission.ASEC_CREATE
com.android.server.MountService.fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)int  ::  android.permission.ASEC_CREATE
com.android.server.MountService.fixateNewestUserKeyAuth(int)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.forgetAllVolumes()void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.forgetVolume(java.lang.String)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.format(java.lang.String)void  ::  android.permission.MOUNT_FORMAT_FILESYSTEMS
com.android.server.MountService.formatVolume(java.lang.String)int  ::  android.permission.MOUNT_FORMAT_FILESYSTEMS
com.android.server.MountService.getEncryptionState()int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.getField(java.lang.String)java.lang.String  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.getPassword()java.lang.String  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.getPasswordType()int  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.getPrimaryStorageUuid()java.lang.String  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.getSecureContainerFilesystemPath(java.lang.String)java.lang.String  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.getSecureContainerList()java.lang.String[]  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.getSecureContainerPath(java.lang.String)java.lang.String  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.getStorageUsers(java.lang.String)I[]  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.isConvertibleToFBE()boolean  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.isSecureContainerMounted(java.lang.String)boolean  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.lockUserKey(int)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.mount(java.lang.String)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.mountSecureContainer(java.lang.String,java.lang.String,int,boolean)int  ::  android.permission.ASEC_MOUNT_UNMOUNT
com.android.server.MountService.mountVolume(java.lang.String)int  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.partitionMixed(java.lang.String,int)void  ::  android.permission.MOUNT_FORMAT_FILESYSTEMS
com.android.server.MountService.partitionPrivate(java.lang.String)void  ::  android.permission.MOUNT_FORMAT_FILESYSTEMS
com.android.server.MountService.partitionPublic(java.lang.String)void  ::  android.permission.MOUNT_FORMAT_FILESYSTEMS
com.android.server.MountService.prepareUserStorage(java.lang.String,int,int,int)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.renameSecureContainer(java.lang.String,java.lang.String)int  ::  android.permission.ASEC_RENAME
com.android.server.MountService.resizeSecureContainer(java.lang.String,int,java.lang.String)int  ::  android.permission.ASEC_CREATE
com.android.server.MountService.runMaintenance()void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.setDebugFlags(int,int)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.setField(java.lang.String,java.lang.String)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.setVolumeNickname(java.lang.String,java.lang.String)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.setVolumeUserFlags(java.lang.String,int,int)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.shutdown(android.os.storage.IMountShutdownObserver)void  ::  android.permission.SHUTDOWN
com.android.server.MountService.unlockUserKey(int,int,[byte,[byte)void  ::  android.permission.STORAGE_INTERNAL
com.android.server.MountService.unmount(java.lang.String)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.unmountSecureContainer(java.lang.String,boolean)int  ::  android.permission.ASEC_MOUNT_UNMOUNT
com.android.server.MountService.unmountVolume(java.lang.String,boolean,boolean)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.verifyEncryptionPassword(java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.NetworkManagementService.addIdleTimer(java.lang.String,int,int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.addInterfaceToLocalNetwork(java.lang.String,java.util.List)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.addInterfaceToNetwork(java.lang.String,int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.addLegacyRouteForNetId(int,android.net.RouteInfo,int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.addRoute(int,android.net.RouteInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.addVpnUidRanges(int,[android.net.UidRange)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.allowProtect(int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.clearDefaultNetId()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.clearInterfaceAddresses(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.clearPermission([int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.createPhysicalNetwork(int,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.createVirtualNetwork(int,boolean,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.denyProtect(int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.detachPppd(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.disableIpv6(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.disableNat(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.enableIpv6(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.enableNat(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getDnsForwarders()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getInterfaceConfig(java.lang.String)android.net.InterfaceConfiguration  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getIpForwardingEnabled()boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsDetail()android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsSummaryDev()android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsSummaryXt()android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsTethering()android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsUidDetail(int)android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.isBandwidthControlEnabled()boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.isClatdStarted(java.lang.String)boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.isTetheringStarted()boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.listInterfaces()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.listTetheredInterfaces()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.listTtys()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.registerObserver(android.net.INetworkManagementEventObserver)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeIdleTimer(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeInterfaceAlert(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeInterfaceFromLocalNetwork(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeInterfaceFromNetwork(java.lang.String,int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeInterfaceQuota(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeNetwork(int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeRoute(int,android.net.RouteInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeRoutesFromLocalNetwork(java.util.List)int  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeVpnUidRanges(int,[android.net.UidRange)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDefaultNetId(int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDnsConfigurationForNetwork(int,[java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDnsForwarders(android.net.Network,[java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDnsServersForNetwork(int,[java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setGlobalAlert(long)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceAlert(java.lang.String,long)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceDown(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceIpv6NdOffload(java.lang.String,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceQuota(java.lang.String,long)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceUp(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setIpForwardingEnabled(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setMtu(java.lang.String,int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setNetworkPermission(int,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setPermission(java.lang.String,[int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setUidCleartextNetworkPolicy(int,int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setUidMeteredNetworkBlacklist(int,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setUidMeteredNetworkWhitelist(int,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.shutdown()void  ::  android.permission.SHUTDOWN
com.android.server.NetworkManagementService.startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.startClatd(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.startInterfaceForwarding(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.startTethering([java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.stopAccessPoint(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.stopClatd(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.stopInterfaceForwarding(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.stopTethering()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.tetherInterface(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.unregisterObserver(android.net.INetworkManagementEventObserver)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.untetherInterface(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.wifiFirmwareReload(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkScoreService.clearScores()boolean  ::  android.permission.BROADCAST_NETWORK_PRIVILEGED, android.permission.SCORE_NETWORKS
com.android.server.NetworkScoreService.disableScoring()void  ::  android.permission.SCORE_NETWORKS
com.android.server.NetworkScoreService.registerNetworkScoreCache(int,android.net.INetworkScoreCache)void  ::  android.permission.BROADCAST_NETWORK_PRIVILEGED
com.android.server.NetworkScoreService.setActiveScorer(java.lang.String)boolean  ::  android.permission.SCORE_NETWORKS
com.android.server.NetworkScoreService.updateScores([android.net.ScoredNetwork)boolean  ::  android.permission.SCORE_NETWORKS
com.android.server.NsdService.getMessenger()android.os.Messenger  ::  android.permission.INTERNET
com.android.server.NsdService.setEnabled(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.RecoverySystemService$BinderService.clearBcb()boolean  ::  android.permission.RECOVERY
com.android.server.RecoverySystemService$BinderService.rebootRecoveryWithCommand(java.lang.String)void  ::  android.permission.RECOVERY
com.android.server.RecoverySystemService$BinderService.setupBcb(java.lang.String)boolean  ::  android.permission.RECOVERY
com.android.server.RecoverySystemService$BinderService.uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)boolean  ::  android.permission.RECOVERY
com.android.server.SerialService.getSerialPorts()java.lang.String[]  ::  android.permission.SERIAL_PORT
com.android.server.SerialService.openSerialPort(java.lang.String)android.os.ParcelFileDescriptor  ::  android.permission.SERIAL_PORT
com.android.server.TelephonyRegistry.addOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)void  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.server.TelephonyRegistry.listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.server.TelephonyRegistry.listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCallForwardingChanged(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCallForwardingChangedForSubscriber(int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCallState(int,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCallStateForPhoneId(int,int,int,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCarrierNetworkChange(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCellInfo(java.util.List)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCellInfoForSubscriber(int,java.util.List)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCellLocation(android.os.Bundle)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCellLocationForSubscriber(int,android.os.Bundle)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataActivity(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataActivityForSubscriber(int,int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.NetworkCapabilities,int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataConnectionFailed(java.lang.String,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataConnectionFailedForSubscriber(int,java.lang.String,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataConnectionForSubscriber(int,int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.NetworkCapabilities,int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDisconnectCause(int,int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyMessageWaitingChangedForPhoneId(int,int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyOemHookRawEventForSubscriber(int,[byte)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyOtaspChanged(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyPreciseCallState(int,int,int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyPreciseDataConnectionFailed(java.lang.String,java.lang.String,java.lang.String,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyVoLteServiceStateChanged(android.telephony.VoLteServiceState)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TextServicesManagerService.setCurrentSpellChecker(java.lang.String,java.lang.String)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.TextServicesManagerService.setCurrentSpellCheckerSubtype(java.lang.String,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.TextServicesManagerService.setSpellCheckerEnabled(boolean)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.UpdateLockService.acquireUpdateLock(android.os.IBinder,java.lang.String)void  ::  android.permission.UPDATE_LOCK
com.android.server.UpdateLockService.releaseUpdateLock(android.os.IBinder)void  ::  android.permission.UPDATE_LOCK
com.android.server.VibratorService.cancelVibrate(android.os.IBinder)void  ::  android.permission.VIBRATE
com.android.server.VibratorService.vibrate(int,java.lang.String,long,int,android.os.IBinder)void  ::  android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
com.android.server.VibratorService.vibratePattern(int,java.lang.String,[long,int,int,android.os.IBinder)void  ::  android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
com.android.server.accessibility.AccessibilityManagerService$Service.findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.findAccessibilityNodeInfosByViewId(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.getMagnificationCenterX()float  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.getMagnificationCenterY()float  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.getMagnificationRegion()android.graphics.Region  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.getMagnificationScale()float  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.getWindow(int)android.view.accessibility.AccessibilityWindowInfo  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.getWindows()java.util.List  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.performGlobalAction(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.resetMagnification(boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.setMagnificationScaleAndCenter(float,float,float,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.setSoftKeyboardShowMode(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)int  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.addClient(android.view.accessibility.IAccessibilityManagerClient,int)int  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.disableAccessibilityService(android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.enableAccessibilityService(android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.getEnabledAccessibilityServiceList(int,int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.getInstalledAccessibilityServiceList(int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.getWindowToken(int,int)android.os.IBinder  ::  getWindowToken
com.android.server.accessibility.AccessibilityManagerService.interrupt(int)void  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.removeAccessibilityInteractionConnection(android.view.IWindow)void  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)void  ::  temporaryEnableAccessibilityStateUntilKeyguardRemoved
com.android.server.accounts.AccountManagerService.addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[java.lang.String,boolean,android.os.Bundle,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.addSharedAccountsFromParentUser(int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.getAccounts(java.lang.String,java.lang.String)android.accounts.Account[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.getAccountsAsUser(java.lang.String,int,java.lang.String)android.accounts.Account[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)android.accounts.Account[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.getAccountsForPackage(java.lang.String,int,java.lang.String)android.accounts.Account[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.getAuthenticatorTypes(int)android.accounts.AuthenticatorDescription[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.accounts.AccountManagerService.removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.appNotRespondingViaProvider(android.os.IBinder)void  ::  android.permission.REMOVE_TASKS
com.android.server.am.ActivityManagerService.bindBackupAgent(java.lang.String,int,int)boolean  ::  android.permission.CONFIRM_FULL_BACKUP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ActivityManagerService.bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)int  ::  android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ActivityManagerService.bootAnimationComplete()void  ::  android.permission.BROADCAST_STICKY
com.android.server.am.ActivityManagerService.clearGrantedUriPermissions(java.lang.String,int)void  ::  android.permission.CLEAR_APP_GRANTED_URI_PERMISSIONS
com.android.server.am.ActivityManagerService.clearPendingBackup()void  ::  android.permission.BACKUP
com.android.server.am.ActivityManagerService.crashApplication(int,int,java.lang.String,java.lang.String)void  ::  android.permission.FORCE_STOP_PACKAGES
com.android.server.am.ActivityManagerService.createStackOnDisplay(int)android.app.IActivityContainer  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.createVirtualActivityContainer(android.os.IBinder,android.app.IActivityContainerCallback)android.app.IActivityContainer  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.deleteActivityContainer(android.app.IActivityContainer)void  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)boolean  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.finishHeavyWeightApp()void  ::  android.permission.FORCE_STOP_PACKAGES
com.android.server.am.ActivityManagerService.forceStopPackage(java.lang.String,int)void  ::  android.permission.FORCE_STOP_PACKAGES
com.android.server.am.ActivityManagerService.getAllStackInfos()java.util.List  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.getAssistContextExtras(int)android.os.Bundle  ::  android.permission.GET_TOP_ACTIVITY_INFO
com.android.server.am.ActivityManagerService.getContentProviderExternal(java.lang.String,int,android.os.IBinder)android.app.IActivityManager$ContentProviderHolder  ::  android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
com.android.server.am.ActivityManagerService.getCurrentUser()android.content.pm.UserInfo  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.am.ActivityManagerService.getGrantedUriPermissions(java.lang.String,int)android.content.pm.ParceledListSlice  ::  android.permission.GET_APP_GRANTED_URI_PERMISSIONS
com.android.server.am.ActivityManagerService.getIntentForIntentSender(android.content.IIntentSender)android.content.Intent  ::  android.permission.GET_INTENT_SENDER_INTENT
com.android.server.am.ActivityManagerService.getPackageProcessState(java.lang.String,java.lang.String)int  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.am.ActivityManagerService.getRecentTasks(int,int,int)android.content.pm.ParceledListSlice  ::  android.permission.GET_DETAILED_TASKS, android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
com.android.server.am.ActivityManagerService.getRunningAppProcesses()java.util.List  ::  android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
com.android.server.am.ActivityManagerService.getRunningExternalApplications()java.util.List  ::  android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
com.android.server.am.ActivityManagerService.getRunningUserIds()I[]  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.am.ActivityManagerService.getStackInfo(int)android.app.ActivityManager$StackInfo  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.getTaskBounds(int)android.graphics.Rect  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.getTaskDescriptionIcon(java.lang.String,int)android.graphics.Bitmap  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.getTaskThumbnail(int)android.app.ActivityManager$TaskThumbnail  ::  android.permission.BROADCAST_STICKY, android.permission.READ_FRAME_BUFFER
com.android.server.am.ActivityManagerService.getTasks(int,int)java.util.List  ::  android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
com.android.server.am.ActivityManagerService.hang(android.os.IBinder,boolean)void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.inputDispatchingTimedOut(int,boolean,java.lang.String)long  ::  android.permission.FILTER_EVENTS
com.android.server.am.ActivityManagerService.isInHomeStack(int)boolean  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.isUserRunning(int,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.am.ActivityManagerService.killAllBackgroundProcesses()void  ::  android.permission.KILL_BACKGROUND_PROCESSES
com.android.server.am.ActivityManagerService.killBackgroundProcesses(java.lang.String,int)void  ::  android.permission.KILL_BACKGROUND_PROCESSES
com.android.server.am.ActivityManagerService.killPackageDependents(java.lang.String,int)void  ::  android.permission.KILL_UID
com.android.server.am.ActivityManagerService.killUid(int,int,java.lang.String)void  ::  android.permission.KILL_UID
com.android.server.am.ActivityManagerService.launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)boolean  ::  android.permission.GET_TOP_ACTIVITY_INFO
com.android.server.am.ActivityManagerService.moveTaskBackwards(int)void  ::  android.permission.REORDER_TASKS
com.android.server.am.ActivityManagerService.moveTaskToDockedStack(int,int,boolean,boolean,android.graphics.Rect,boolean)boolean  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.moveTaskToFront(int,int,android.os.Bundle)void  ::  android.permission.BROADCAST_STICKY, android.permission.REORDER_TASKS
com.android.server.am.ActivityManagerService.moveTaskToStack(int,int,boolean)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.moveTasksToFullscreenStack(int,boolean)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.moveTopActivityToPinnedStack(int,android.graphics.Rect)boolean  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)boolean  ::  android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ActivityManagerService.performIdleMaintenance()void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.positionTaskInStack(int,int,int)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)boolean  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.registerProcessObserver(android.app.IProcessObserver)void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.registerTaskStackListener(android.app.ITaskStackListener)void  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.registerUidObserver(android.app.IUidObserver,int)void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.removeContentProviderExternal(java.lang.String,android.os.IBinder)void  ::  android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
com.android.server.am.ActivityManagerService.removeStack(int)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.removeTask(int)boolean  ::  android.permission.BROADCAST_STICKY, android.permission.REMOVE_TASKS
com.android.server.am.ActivityManagerService.requestAssistContextExtras(int,com.android.internal.os.IResultReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)boolean  ::  android.permission.GET_TOP_ACTIVITY_INFO
com.android.server.am.ActivityManagerService.requestBugReport(int)void  ::  android.permission.DUMP
com.android.server.am.ActivityManagerService.resizeDockedStack(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.resizePinnedStack(android.graphics.Rect,android.graphics.Rect)void  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.resizeStack(int,android.graphics.Rect,boolean,boolean,boolean,int)void  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.resizeTask(int,android.graphics.Rect,int)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.restart()void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.resumeAppSwitches()void  ::  android.permission.STOP_APP_SWITCHES
com.android.server.am.ActivityManagerService.sendIdleJobTrigger()void  ::  android.permission.BROADCAST_STICKY, android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.setActivityController(android.app.IActivityController,boolean)void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.setAlwaysFinish(boolean)void  ::  android.permission.SET_ALWAYS_FINISH
com.android.server.am.ActivityManagerService.setDebugApp(java.lang.String,boolean,boolean)void  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)void  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.setFocusedStack(int)void  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.setFocusedTask(int)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.setFrontActivityScreenCompatMode(int)void  ::  android.permission.SET_SCREEN_COMPATIBILITY
com.android.server.am.ActivityManagerService.setHasTopUi(boolean)void  ::  android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.am.ActivityManagerService.setLenientBackgroundCheck(boolean)void  ::  android.permission.SET_PROCESS_LIMIT
com.android.server.am.ActivityManagerService.setLockScreenShown(boolean,boolean)void  ::  android.permission.DEVICE_POWER
com.android.server.am.ActivityManagerService.setPackageAskScreenCompat(java.lang.String,boolean)void  ::  android.permission.SET_SCREEN_COMPATIBILITY
com.android.server.am.ActivityManagerService.setPackageScreenCompatMode(java.lang.String,int)void  ::  android.permission.SET_SCREEN_COMPATIBILITY
com.android.server.am.ActivityManagerService.setProcessForeground(android.os.IBinder,int,boolean)void  ::  android.permission.SET_PROCESS_LIMIT
com.android.server.am.ActivityManagerService.setProcessLimit(int)void  ::  android.permission.SET_PROCESS_LIMIT
com.android.server.am.ActivityManagerService.setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.shutdown(int)boolean  ::  android.permission.SHUTDOWN
com.android.server.am.ActivityManagerService.signalPersistentProcesses(int)void  ::  android.permission.SIGNAL_PERSISTENT_PROCESSES
com.android.server.am.ActivityManagerService.startActivities(android.app.IApplicationThread,java.lang.String,[android.content.Intent,[java.lang.String,android.os.IBinder,android.os.Bundle,int)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivityAndWait(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)android.app.IActivityManager$WaitResult  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivityFromRecents(int,android.os.Bundle)int  ::  android.permission.BROADCAST_STICKY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ActivityManagerService.startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startBinderTracking()boolean  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.startConfirmDeviceCredentialIntent(android.content.Intent)void  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.startSystemLockTaskMode(int)void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.startUserInBackground(int)boolean  ::  android.permission.BROADCAST_STICKY, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.startVoiceActivity(java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)int  ::  android.permission.BIND_VOICE_INTERACTION
com.android.server.am.ActivityManagerService.stopAppSwitches()void  ::  android.permission.BROADCAST_STICKY, android.permission.STOP_APP_SWITCHES
com.android.server.am.ActivityManagerService.stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)boolean  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.stopLockTaskMode()void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)int  ::  android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ActivityManagerService.stopServiceToken(android.content.ComponentName,android.os.IBinder,int)boolean  ::  android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ActivityManagerService.stopSystemLockTaskMode()void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.stopUser(int,boolean,android.app.IStopUserCallback)int  ::  android.permission.BROADCAST_STICKY, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.suppressResizeConfigChanges(boolean)void  ::  android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.swapDockedAndFullscreenStack()void  ::  android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
com.android.server.am.ActivityManagerService.unbindService(android.app.IServiceConnection)boolean  ::  android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ActivityManagerService.unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)void  ::  android.permission.BROADCAST_STICKY
com.android.server.am.ActivityManagerService.unhandledBack()void  ::  android.permission.FORCE_BACK
com.android.server.am.ActivityManagerService.unlockUser(int,[byte,[byte,android.os.IProgressListener)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.updateConfiguration(android.content.res.Configuration)void  ::  android.permission.CHANGE_CONFIGURATION
com.android.server.am.ActivityManagerService.updatePersistentConfiguration(android.content.res.Configuration)void  ::  android.permission.CHANGE_CONFIGURATION
com.android.server.am.BatteryStatsService.getAwakeTimeBattery()long  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.getAwakeTimePlugged()long  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.getStatistics()B[]  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.getStatisticsStream()android.os.ParcelFileDescriptor  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.noteBleScanStarted(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteBleScanStopped(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteConnectivityChanged(int,java.lang.String)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteDeviceIdleMode(int,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteEvent(int,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFlashlightOff(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFlashlightOn(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockAcquired(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockAcquiredFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockReleased(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockReleasedFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteInteractive(boolean)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteJobFinish(java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteJobStart(java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteLongPartialWakelockFinish(java.lang.String,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteLongPartialWakelockStart(java.lang.String,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteMobileRadioPowerState(int,long,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteModemControllerActivity(android.telephony.ModemActivityInfo)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteNetworkInterfaceType(java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteNetworkStatsEnabled()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneDataConnectionState(int,boolean)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneOff()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneOn()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneSignalStrength(android.telephony.SignalStrength)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneState(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteResetAudio()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteResetBleScan()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteResetCamera()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteResetFlashlight()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteResetVideo()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteScreenBrightness(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteScreenState(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartAudio(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartCamera(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartGps(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartSensor(int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartVideo(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopAudio(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopCamera(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopGps(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopSensor(int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopVideo(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopWakelock(int,int,java.lang.String,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteSyncFinish(java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteSyncStart(java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteUserActivity(int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteVibratorOff(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteVibratorOn(int,long)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWakeUp(java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiControllerActivity(android.net.wifi.WifiActivityEnergyInfo)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastDisabled(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastDisabledFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastEnabled(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastEnabledFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiOff()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiOn()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiRadioPowerState(int,long,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiRssiChanged(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiRunning(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStarted(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStartedFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStopped(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStoppedFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiState(int,java.lang.String)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiStopped(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiSupplicantStateChanged(int,boolean)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.setBatteryState(int,int,int,int,int,int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.takeUidSnapshot(int)android.os.health.HealthStatsParceler  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.takeUidSnapshots([int)android.os.health.HealthStatsParceler[]  ::  android.permission.BATTERY_STATS
com.android.server.am.PendingIntentRecord.send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)void  ::  android.permission.BROADCAST_STICKY, android.permission.READ_EXTERNAL_STORAGE, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
com.android.server.am.ProcessStatsService.getCurrentStats(java.util.List)B[]  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.am.ProcessStatsService.getStatsOverTime(long)android.os.ParcelFileDescriptor  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.appwidget.AppWidgetServiceImpl.bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)boolean  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.os.IBinder)void  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.createAppWidgetConfigIntentSender(java.lang.String,int,int)android.content.IntentSender  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.deleteAppWidgetId(java.lang.String,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetInfo(java.lang.String,int)android.appwidget.AppWidgetProviderInfo  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetOptions(java.lang.String,int)android.os.Bundle  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetViews(java.lang.String,int)android.widget.RemoteViews  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.hasBindAppWidgetPermission(java.lang.String,int)boolean  ::  android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
com.android.server.appwidget.AppWidgetServiceImpl.notifyAppWidgetViewDataChanged(java.lang.String,[int,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.partiallyUpdateAppWidgetIds(java.lang.String,[int,android.widget.RemoteViews)void  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.setBindAppWidgetPermission(java.lang.String,int,boolean)void  ::  android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
com.android.server.appwidget.AppWidgetServiceImpl.unbindRemoteViewsService(java.lang.String,int,android.content.Intent)void  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.updateAppWidgetIds(java.lang.String,[int,android.widget.RemoteViews)void  ::  android.permission.BIND_APPWIDGET
com.android.server.appwidget.AppWidgetServiceImpl.updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)void  ::  android.permission.BIND_APPWIDGET
com.android.server.audio.AudioService.disableSafeMediaVolume(java.lang.String)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.audio.AudioService.forceRemoteSubmixFullVolume(boolean,android.os.IBinder)void  ::  android.permission.CAPTURE_AUDIO_OUTPUT
com.android.server.audio.AudioService.notifyVolumeControllerVisible(android.media.IVolumeController,boolean)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.audio.AudioService.registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean)java.lang.String  ::  android.permission.MODIFY_AUDIO_ROUTING
com.android.server.audio.AudioService.requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.audio.AudioService.setBluetoothScoOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
com.android.server.audio.AudioService.setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)int  ::  android.permission.MODIFY_AUDIO_ROUTING
com.android.server.audio.AudioService.setMasterMute(boolean,int,java.lang.String,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.audio.AudioService.setMicrophoneMute(boolean,java.lang.String,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MODIFY_AUDIO_SETTINGS
com.android.server.audio.AudioService.setMode(int,android.os.IBinder,java.lang.String)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
com.android.server.audio.AudioService.setRingerModeInternal(int,java.lang.String)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.audio.AudioService.setRingtonePlayer(android.media.IRingtonePlayer)void  ::  android.permission.REMOTE_AUDIO_PLAYBACK
com.android.server.audio.AudioService.setSpeakerphoneOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
com.android.server.audio.AudioService.setVolumeController(android.media.IVolumeController)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.audio.AudioService.setVolumePolicy(android.media.VolumePolicy)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.audio.AudioService.startBluetoothSco(android.os.IBinder,int)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
com.android.server.audio.AudioService.startBluetoothScoVirtualCall(android.os.IBinder)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
com.android.server.audio.AudioService.stopBluetoothSco(android.os.IBinder)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
com.android.server.backup.BackupManagerService$ActiveRestoreSession.getAvailableRestoreSets(android.app.backup.IRestoreObserver)int  ::  android.permission.BACKUP
com.android.server.backup.BackupManagerService$ActiveRestoreSession.restoreAll(long,android.app.backup.IRestoreObserver)int  ::  android.permission.BACKUP
com.android.server.backup.BackupManagerService$ActiveRestoreSession.restorePackage(java.lang.String,android.app.backup.IRestoreObserver)int  ::  android.permission.BACKUP
com.android.server.backup.BackupManagerService$ActiveRestoreSession.restoreSome(long,android.app.backup.IRestoreObserver,[java.lang.String)int  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.backupNow()void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.beginRestoreSession(java.lang.String,java.lang.String)android.app.backup.IRestoreSession  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.clearBackupData(java.lang.String,java.lang.String)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.dataChanged(java.lang.String)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,[java.lang.String)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.fullRestore(android.os.ParcelFileDescriptor)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.fullTransportBackup([java.lang.String)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.getAvailableRestoreToken(java.lang.String)long  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.getConfigurationIntent(java.lang.String)android.content.Intent  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.getCurrentTransport()java.lang.String  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.getDataManagementIntent(java.lang.String)android.content.Intent  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.getDataManagementLabel(java.lang.String)java.lang.String  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.getDestinationString(java.lang.String)java.lang.String  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.hasBackupPassword()boolean  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.isAppEligibleForBackup(java.lang.String)boolean  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.isBackupEnabled()boolean  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.listAllTransports()java.lang.String[]  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.requestBackup([java.lang.String,android.app.backup.IBackupObserver)int  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.restoreAtInstall(java.lang.String,int)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.selectBackupTransport(java.lang.String)java.lang.String  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.setAutoRestore(boolean)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.setBackupEnabled(boolean)void  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.setBackupPassword(java.lang.String,java.lang.String)boolean  ::  android.permission.BACKUP
com.android.server.backup.Trampoline.setBackupProvisioned(boolean)void  ::  android.permission.BACKUP
com.android.server.connectivity.IpConnectivityMetrics$Impl.logEvent(android.net.ConnectivityMetricsEvent)int  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl.getEvents(android.net.ConnectivityMetricsEvent$Reference)android.net.ConnectivityMetricsEvent[]  ::  android.permission.DUMP
com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl.logEvent(android.net.ConnectivityMetricsEvent)long  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl.logEvents([android.net.ConnectivityMetricsEvent)long  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl.register(android.app.PendingIntent)boolean  ::  android.permission.DUMP
com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl.unregister(android.app.PendingIntent)void  ::  android.permission.DUMP
com.android.server.content.ContentService.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.getCache(java.lang.String,android.net.Uri,int)android.os.Bundle  ::  android.permission.CACHE_CONTENT, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.getCurrentSyncs()java.util.List  ::  android.permission.GET_ACCOUNTS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.getCurrentSyncsAsUser(int)java.util.List  ::  android.permission.GET_ACCOUNTS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.getIsSyncable(android.accounts.Account,java.lang.String)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getMasterSyncAutomatically()boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getMasterSyncAutomaticallyAsUser(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)java.util.List  ::  android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)java.lang.String[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.getSyncAdapterTypes()android.content.SyncAdapterType[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.getSyncAdapterTypesAsUser(int)android.content.SyncAdapterType[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.getSyncAutomatically(android.accounts.Account,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)android.content.SyncStatusInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)android.content.SyncStatusInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)boolean  ::  android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)void  ::  android.permission.CACHE_CONTENT, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setIsSyncable(android.accounts.Account,java.lang.String,int)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setMasterSyncAutomatically(boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setMasterSyncAutomaticallyAsUser(boolean,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.sync(android.content.SyncRequest)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.syncAsUser(android.content.SyncRequest,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.approveCaCert(java.lang.String,int,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.clearCrossProfileIntentFilters(android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.clearDeviceOwner(java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.clearProfileOwner(android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)android.os.UserHandle  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS, android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.enableSystemApp(android.content.ComponentName,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.enableSystemAppWithIntent(android.content.ComponentName,android.content.Intent)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.enforceCanManageCaCerts(android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_CA_CERTIFICATES
com.android.server.devicepolicy.DevicePolicyManagerService.forceRemoveActiveAdmin(android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getAccountTypesWithManagementDisabled()java.lang.String[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getAccountTypesWithManagementDisabledAsUser(int)java.lang.String[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getActiveAdmins(int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getAlwaysOnVpnPackage(android.content.ComponentName)java.lang.String  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getApplicationRestrictions(android.content.ComponentName,java.lang.String)android.os.Bundle  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getApplicationRestrictionsManagingPackage(android.content.ComponentName)java.lang.String  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getAutoTimeRequired()boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getBluetoothContactSharingDisabled(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getBluetoothContactSharingDisabledForUser(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getCameraDisabled(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getCertInstallerPackage(android.content.ComponentName)java.lang.String  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getCrossProfileCallerIdDisabled(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getCrossProfileCallerIdDisabledForUser(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.getCrossProfileContactsSearchDisabled(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getCrossProfileContactsSearchDisabledForUser(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.getCrossProfileWidgetProviders(android.content.ComponentName)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getCurrentFailedPasswordAttempts(int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getDeviceOwnerComponent(boolean)android.content.ComponentName  ::  android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.getDeviceOwnerName()java.lang.String  ::  android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.getDeviceOwnerUserId()int  ::  android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.getDoNotAskCredentialsOnBoot()boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT
com.android.server.devicepolicy.DevicePolicyManagerService.getForceEphemeralUsers(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getGlobalProxyAdmin(int)android.content.ComponentName  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getKeepUninstalledPackages(android.content.ComponentName)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getLockTaskPackages(android.content.ComponentName)java.lang.String[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getLongSupportMessage(android.content.ComponentName)java.lang.CharSequence  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getLongSupportMessageForUser(android.content.ComponentName,int)java.lang.CharSequence  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getMaximumTimeToLock(android.content.ComponentName,int,boolean)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getMaximumTimeToLockForUserAndProfiles(int)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getOrganizationColor(android.content.ComponentName)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getOrganizationColorForUser(int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getOrganizationName(android.content.ComponentName)java.lang.CharSequence  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getOrganizationNameForUser(int)java.lang.CharSequence  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordExpiration(android.content.ComponentName,int,boolean)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordHistoryLength(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordMinimumLength(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordMinimumLetters(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPasswordQuality(android.content.ComponentName,int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPermissionPolicy(android.content.ComponentName)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPermittedAccessibilityServices(android.content.ComponentName)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPermittedAccessibilityServicesForUser(int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPermittedInputMethods(android.content.ComponentName)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getPermittedInputMethodsForCurrentUser()java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getProfileOwnerName(int)java.lang.String  ::  android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.getProfileWithMinimumFailedPasswordsForWipe(int,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getRestrictionsProvider(int)android.content.ComponentName  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getScreenCaptureDisabled(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getShortSupportMessage(android.content.ComponentName)java.lang.CharSequence  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getShortSupportMessageForUser(android.content.ComponentName,int)java.lang.CharSequence  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getStorageEncryption(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getStorageEncryptionStatus(java.lang.String,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getUserProvisioningState()int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getUserRestrictions(android.content.ComponentName)android.os.Bundle  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.getWifiMacAddress(android.content.ComponentName)java.lang.String  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.hasGrantedPolicy(android.content.ComponentName,int,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.hasUserSetupCompleted()boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.installCaCert(android.content.ComponentName,[byte)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_CA_CERTIFICATES
com.android.server.devicepolicy.DevicePolicyManagerService.installKeyPair(android.content.ComponentName,[byte,[byte,[byte,java.lang.String,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isActivePasswordSufficient(int,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isAdminActive(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isAffiliatedUser()boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isApplicationHidden(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isBackupServiceEnabled(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isCaCertApproved(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.isCallerApplicationRestrictionsManagingPackage()boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isDeviceProvisioningConfigApplied()boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isLockTaskPermitted(java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isManagedProfile(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isMasterVolumeMuted(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isPackageSuspended(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isProfileActivePasswordSufficientForParent(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isProvisioningAllowed(java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isRemovingAdmin(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isSecurityLoggingEnabled(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isSystemOnlyUser(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isUninstallBlocked(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.isUninstallInQueue(java.lang.String)boolean  ::  android.permission.MANAGE_DEVICE_ADMINS
com.android.server.devicepolicy.DevicePolicyManagerService.lockNow(boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.notifyLockTaskModeChanged(boolean,java.lang.String,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.notifyPendingSystemUpdate(long)void  ::  android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
com.android.server.devicepolicy.DevicePolicyManagerService.packageHasActiveAdmins(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.reboot(android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.removeActiveAdmin(android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS
com.android.server.devicepolicy.DevicePolicyManagerService.removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.removeKeyPair(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.removeUser(android.content.ComponentName,android.os.UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.reportFailedFingerprintAttempt(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.reportFailedPasswordAttempt(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.reportKeyguardDismissed(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.reportKeyguardSecured(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.reportSuccessfulFingerprintAttempt(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.reportSuccessfulPasswordAttempt(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.requestBugreport(android.content.ComponentName)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.resetPassword(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.retrievePreRebootSecurityLogs(android.content.ComponentName)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.retrieveSecurityLogs(android.content.ComponentName)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setActiveAdmin(android.content.ComponentName,boolean,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS
com.android.server.devicepolicy.DevicePolicyManagerService.setActivePasswordState(int,int,int,int,int,int,int,int,int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setAffiliationIds(android.content.ComponentName,java.util.List)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setAutoTimeRequired(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setBackupServiceEnabled(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setCameraDisabled(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setCertInstallerPackage(android.content.ComponentName,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setDeviceOwner(android.content.ComponentName,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
com.android.server.devicepolicy.DevicePolicyManagerService.setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setDeviceProvisioningConfigApplied()void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.setForceEphemeralUsers(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)android.content.ComponentName  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setKeepUninstalledPackages(android.content.ComponentName,java.util.List)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setKeyguardDisabled(android.content.ComponentName,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setLockTaskPackages(android.content.ComponentName,[java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setMasterVolumeMuted(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setMaximumTimeToLock(android.content.ComponentName,long,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setOrganizationColor(android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setOrganizationColorForUser(int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.setOrganizationName(android.content.ComponentName,java.lang.CharSequence)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPackagesSuspended(android.content.ComponentName,[java.lang.String,boolean)java.lang.String[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordHistoryLength(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordMinimumLength(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordMinimumLetters(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPasswordQuality(android.content.ComponentName,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPermissionPolicy(android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setPermittedInputMethods(android.content.ComponentName,java.util.List)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setProfileEnabled(android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setProfileName(android.content.ComponentName,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setProfileOwner(android.content.ComponentName,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
com.android.server.devicepolicy.DevicePolicyManagerService.setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setScreenCaptureDisabled(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setSecurityLoggingEnabled(android.content.ComponentName,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setStatusBarDisabled(android.content.ComponentName,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setStorageEncryption(android.content.ComponentName,boolean)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setUserIcon(android.content.ComponentName,android.graphics.Bitmap)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.setUserProvisioningState(int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
com.android.server.devicepolicy.DevicePolicyManagerService.setUserRestriction(android.content.ComponentName,java.lang.String,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.switchUser(android.content.ComponentName,android.os.UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.devicepolicy.DevicePolicyManagerService.uninstallCaCerts(android.content.ComponentName,[java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_CA_CERTIFICATES
com.android.server.devicepolicy.DevicePolicyManagerService.uninstallPackageWithActiveAdmins(java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS, android.permission.MANAGE_USERS
com.android.server.devicepolicy.DevicePolicyManagerService.wipeData(int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.display.DisplayManagerService$BinderService.connectWifiDisplay(java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService$BinderService.createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)int  ::  android.permission.CAPTURE_SECURE_VIDEO_OUTPUT, android.permission.CAPTURE_VIDEO_OUTPUT
com.android.server.display.DisplayManagerService$BinderService.forgetWifiDisplay(java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService$BinderService.pauseWifiDisplay()void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService$BinderService.renameWifiDisplay(java.lang.String,java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService$BinderService.requestColorMode(int,int)void  ::  android.permission.CONFIGURE_DISPLAY_COLOR_MODE
com.android.server.display.DisplayManagerService$BinderService.resumeWifiDisplay()void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService$BinderService.startWifiDisplayScan()void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService$BinderService.stopWifiDisplayScan()void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.dreams.DreamManagerService$BinderService.awaken()void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.dreams.DreamManagerService$BinderService.dream()void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.dreams.DreamManagerService$BinderService.getDefaultDreamComponent()android.content.ComponentName  ::  android.permission.READ_DREAM_STATE
com.android.server.dreams.DreamManagerService$BinderService.getDreamComponents()android.content.ComponentName[]  ::  android.permission.READ_DREAM_STATE
com.android.server.dreams.DreamManagerService$BinderService.isDreaming()boolean  ::  android.permission.READ_DREAM_STATE
com.android.server.dreams.DreamManagerService$BinderService.setDreamComponents([android.content.ComponentName)void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.dreams.DreamManagerService$BinderService.testDream(android.content.ComponentName)void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.ethernet.EthernetServiceImpl.addListener(android.net.IEthernetServiceListener)void  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ethernet.EthernetServiceImpl.getConfiguration()android.net.IpConfiguration  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ethernet.EthernetServiceImpl.isAvailable()boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ethernet.EthernetServiceImpl.removeListener(android.net.IEthernetServiceListener)void  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ethernet.EthernetServiceImpl.setConfiguration(android.net.IpConfiguration)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)void  ::  android.permission.MANAGE_FINGERPRINT, android.permission.USE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.cancelAuthentication(android.os.IBinder,java.lang.String)void  ::  android.permission.USE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.cancelEnrollment(android.os.IBinder)void  ::  android.permission.MANAGE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.enroll(android.os.IBinder,[byte,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)void  ::  android.permission.MANAGE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.getEnrolledFingerprints(int,java.lang.String)java.util.List  ::  android.permission.USE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.hasEnrolledFingerprints(int,java.lang.String)boolean  ::  android.permission.USE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.isHardwareDetected(long,java.lang.String)boolean  ::  android.permission.USE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.postEnroll(android.os.IBinder)int  ::  android.permission.MANAGE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.preEnroll(android.os.IBinder)long  ::  android.permission.MANAGE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)void  ::  android.permission.MANAGE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.rename(int,int,java.lang.String)void  ::  android.permission.MANAGE_FINGERPRINT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.resetTimeout([byte)void  ::  android.permission.RESET_FINGERPRINT_LOCKOUT
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.setActiveUser(int)void  ::  android.permission.MANAGE_FINGERPRINT
com.android.server.hdmi.HdmiControlService$BinderService.addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.addSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.canChangeSystemAudioMode()boolean  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.clearTimerRecording(int,int,[byte)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.deviceSelect(int,android.hardware.hdmi.IHdmiControlCallback)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.getActiveSource()android.hardware.hdmi.HdmiDeviceInfo  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.getDeviceList()java.util.List  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.getInputDevices()java.util.List  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.getPortInfo()java.util.List  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.getSupportedTypes()I[]  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.getSystemAudioMode()boolean  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.portSelect(int,android.hardware.hdmi.IHdmiControlCallback)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.sendKeyEvent(int,int,boolean)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.sendMhlVendorCommand(int,int,int,[byte)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.sendStandby(int,int)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.sendVendorCommand(int,int,[byte,boolean)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.setArcMode(boolean)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.setProhibitMode(boolean)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.setSystemAudioMode(boolean,android.hardware.hdmi.IHdmiControlCallback)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.setSystemAudioMute(boolean)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.setSystemAudioVolume(int,int,int)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.startOneTouchRecord(int,[byte)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.startTimerRecording(int,int,[byte)void  ::  android.permission.HDMI_CEC
com.android.server.hdmi.HdmiControlService$BinderService.stopOneTouchRecord(int)void  ::  android.permission.HDMI_CEC
com.android.server.input.InputManagerService.addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
com.android.server.input.InputManagerService.isInTabletMode()int  ::  android.permission.TABLET_MODE
com.android.server.input.InputManagerService.registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)void  ::  android.permission.TABLET_MODE
com.android.server.input.InputManagerService.removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
com.android.server.input.InputManagerService.setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
com.android.server.input.InputManagerService.setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
com.android.server.input.InputManagerService.setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)void  ::  android.permission.SET_INPUT_CALIBRATION
com.android.server.input.InputManagerService.tryPointerSpeed(int)void  ::  android.permission.SET_POINTER_SPEED
com.android.server.job.JobSchedulerService$JobSchedulerStub.schedule(android.app.job.JobInfo)int  ::  android.permission.CONNECTIVITY_INTERNAL, android.permission.RECEIVE_BOOT_COMPLETED
com.android.server.job.JobSchedulerService$JobSchedulerStub.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int  ::  android.permission.CONNECTIVITY_INTERNAL, android.permission.UPDATE_DEVICE_STATS
com.android.server.media.MediaRouterService.registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.media.MediaSessionRecord$SessionStub.setFlags(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.media.projection.MediaProjectionManagerService$BinderService.addCallback(android.media.projection.IMediaProjectionWatcherCallback)void  ::  android.permission.MANAGE_MEDIA_PROJECTION
com.android.server.media.projection.MediaProjectionManagerService$BinderService.createProjection(int,java.lang.String,int,boolean)android.media.projection.IMediaProjection  ::  android.permission.MANAGE_MEDIA_PROJECTION
com.android.server.media.projection.MediaProjectionManagerService$BinderService.getActiveProjectionInfo()android.media.projection.MediaProjectionInfo  ::  android.permission.MANAGE_MEDIA_PROJECTION
com.android.server.media.projection.MediaProjectionManagerService$BinderService.removeCallback(android.media.projection.IMediaProjectionWatcherCallback)void  ::  android.permission.MANAGE_MEDIA_PROJECTION
com.android.server.media.projection.MediaProjectionManagerService$BinderService.stopActiveProjection()void  ::  android.permission.MANAGE_MEDIA_PROJECTION
com.android.server.net.NetworkPolicyManagerService.addRestrictBackgroundWhitelistedUid(int)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.addUidPolicy(int,int)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.factoryReset(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL, android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.server.net.NetworkPolicyManagerService.getNetworkPolicies(java.lang.String)android.net.NetworkPolicy[]  ::  android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.server.net.NetworkPolicyManagerService.getNetworkQuotaInfo(android.net.NetworkState)android.net.NetworkQuotaInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.net.NetworkPolicyManagerService.getRestrictBackground()boolean  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.getRestrictBackgroundByCaller()int  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.net.NetworkPolicyManagerService.getRestrictBackgroundWhitelistedUids()I[]  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.getUidPolicy(int)int  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.getUidsWithPolicy(int)I[]  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.isUidForeground(int)boolean  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.onTetheringChanged(java.lang.String,boolean)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.registerListener(android.net.INetworkPolicyListener)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.net.NetworkPolicyManagerService.removeRestrictBackgroundWhitelistedUid(int)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.removeUidPolicy(int,int)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.setConnectivityListener(android.net.INetworkPolicyListener)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.net.NetworkPolicyManagerService.setDeviceIdleMode(boolean)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.setNetworkPolicies([android.net.NetworkPolicy)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.setRestrictBackground(boolean)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.setUidPolicy(int,int)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.snoozeLimit(android.net.NetworkTemplate)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.unregisterListener(android.net.INetworkPolicyListener)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.net.NetworkStatsService.advisePersistThreshold(long)void  ::  android.permission.MODIFY_NETWORK_ACCOUNTING
com.android.server.net.NetworkStatsService.forceUpdate()void  ::  android.permission.READ_NETWORK_USAGE_HISTORY
com.android.server.net.NetworkStatsService.forceUpdateIfaces()void  ::  android.permission.READ_NETWORK_USAGE_HISTORY
com.android.server.net.NetworkStatsService.getDataLayerSnapshotForUid(int)android.net.NetworkStats  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.net.NetworkStatsService.getNetworkTotalBytes(android.net.NetworkTemplate,long,long)long  ::  android.permission.READ_NETWORK_USAGE_HISTORY
com.android.server.net.NetworkStatsService.incrementOperationCount(int,int,int)void  ::  android.permission.MODIFY_NETWORK_ACCOUNTING
com.android.server.net.NetworkStatsService.registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)android.net.DataUsageRequest  ::  android.permission.PACKAGE_USAGE_STATS, android.permission.READ_NETWORK_USAGE_HISTORY
com.android.server.net.NetworkStatsService.setUidForeground(int,boolean)void  ::  android.permission.MODIFY_NETWORK_ACCOUNTING
com.android.server.pm.PackageInstallerService.createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageInstallerService.getAllSessions(int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageInstallerService.getMySessions(java.lang.String,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageInstallerService.registerCallback(android.content.pm.IPackageInstallerCallback,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageInstallerService.setPermissionsResult(int,boolean)void  ::  android.permission.INSTALL_PACKAGES
com.android.server.pm.PackageInstallerService.uninstall(java.lang.String,java.lang.String,int,android.content.IntentSender,int)void  ::  android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)void  ::  android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
com.android.server.pm.PackageManagerService.addPreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.canForwardTo(android.content.Intent,java.lang.String,int,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)void  ::  android.permission.CLEAR_APP_USER_DATA, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.clearCrossProfileIntentFilters(int,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.clearPackagePreferredActivities(java.lang.String)void  ::  android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)void  ::  android.permission.DELETE_CACHE_FILES, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)void  ::  android.permission.DELETE_CACHE_FILES, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver2,int,int)void  ::  android.permission.DELETE_PACKAGES, android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void  ::  android.permission.DELETE_PACKAGES, android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.extendVerificationTimeout(int,int,long)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.PACKAGE_VERIFICATION_AGENT, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.flushPackageRestrictionsAsUser(int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.freeStorage(java.lang.String,long,android.content.IntentSender)void  ::  android.permission.CLEAR_APP_CACHE
com.android.server.pm.PackageManagerService.freeStorageAndNotify(java.lang.String,long,android.content.pm.IPackageDataObserver)void  ::  android.permission.CLEAR_APP_CACHE
com.android.server.pm.PackageManagerService.getActivityInfo(android.content.ComponentName,int,int)android.content.pm.ActivityInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getApplicationEnabledSetting(java.lang.String,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getApplicationHiddenSettingAsUser(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.pm.PackageManagerService.getApplicationInfo(java.lang.String,int,int)android.content.pm.ApplicationInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getComponentEnabledSetting(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getHomeActivities(java.util.List)android.content.ComponentName  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getInstalledPackages(int,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getLastChosenActivity(android.content.Intent,java.lang.String,int)android.content.pm.ResolveInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getMoveStatus(int)int  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.pm.PackageManagerService.getPackageGids(java.lang.String,int,int)I[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getPackageInfo(java.lang.String,int,int)android.content.pm.PackageInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)void  ::  android.permission.GET_PACKAGE_SIZE, android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.getPackageUid(java.lang.String,int,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getPermissionFlags(java.lang.String,java.lang.String,int)int  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
com.android.server.pm.PackageManagerService.getProviderInfo(android.content.ComponentName,int,int)android.content.pm.ProviderInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getReceiverInfo(android.content.ComponentName,int,int)android.content.pm.ActivityInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getServiceInfo(android.content.ComponentName,int,int)android.content.pm.ServiceInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getVerifierDeviceIdentity()android.content.pm.VerifierDeviceIdentity  ::  android.permission.PACKAGE_VERIFICATION_AGENT
com.android.server.pm.PackageManagerService.grantRuntimePermission(java.lang.String,java.lang.String,int)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.installExistingPackageAsUser(java.lang.String,int)int  ::  android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.installPackageAsUser(java.lang.String,android.content.pm.IPackageInstallObserver2,int,java.lang.String,int)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS, android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.isEphemeralApplication(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.isPackageAvailable(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.isPackageSuspendedForUser(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.movePackage(java.lang.String,java.lang.String)int  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MOVE_PACKAGE, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.movePrimaryStorage(java.lang.String)int  ::  android.permission.MOVE_PACKAGE
com.android.server.pm.PackageManagerService.queryIntentActivities(android.content.Intent,java.lang.String,int,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.queryIntentActivityOptions(android.content.ComponentName,[android.content.Intent,[java.lang.String,android.content.Intent,java.lang.String,int,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.queryIntentReceivers(android.content.Intent,java.lang.String,int,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.queryIntentServices(android.content.Intent,java.lang.String,int,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.registerMoveCallback(android.content.pm.IPackageMoveObserver)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.pm.PackageManagerService.replacePreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.resetApplicationPreferences(int)void  ::  android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.resetRuntimePermissions()void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
com.android.server.pm.PackageManagerService.resolveIntent(android.content.Intent,java.lang.String,int,int)android.content.pm.ResolveInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.resolveService(android.content.Intent,java.lang.String,int,int)android.content.pm.ResolveInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.revokeRuntimePermission(java.lang.String,java.lang.String,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
com.android.server.pm.PackageManagerService.setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.pm.PackageManagerService.setBlockUninstallForUser(java.lang.String,boolean,int)boolean  ::  android.permission.DELETE_PACKAGES
com.android.server.pm.PackageManagerService.setComponentEnabledSetting(android.content.ComponentName,int,int,int)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.setDefaultBrowserPackageName(java.lang.String,int)boolean  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.setHomeActivity(android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.setInstallLocation(int)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.pm.PackageManagerService.setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.setPackageStoppedState(java.lang.String,boolean,int)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.setPackagesSuspendedAsUser([java.lang.String,boolean,int)java.lang.String[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
com.android.server.pm.PackageManagerService.setPermissionEnforced(java.lang.String,boolean)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS
com.android.server.pm.PackageManagerService.shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.systemReady()void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.unregisterMoveCallback(android.content.pm.IPackageMoveObserver)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.pm.PackageManagerService.updateExternalMediaStatus(boolean,boolean)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.updateIntentVerificationStatus(java.lang.String,int,int)boolean  ::  android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.updatePermissionFlags(java.lang.String,java.lang.String,int,int,int)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
com.android.server.pm.PackageManagerService.updatePermissionFlagsForAllApps(int,int,int)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
com.android.server.pm.PackageManagerService.verifyIntentFilter(int,int,java.util.List)void  ::  android.permission.INTENT_FILTER_VERIFICATION_AGENT
com.android.server.pm.PackageManagerService.verifyPendingInstall(int,int)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.PACKAGE_VERIFICATION_AGENT, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.ShortcutService.onApplicationActive(java.lang.String,int)void  ::  android.permission.RESET_SHORTCUT_MANAGER_THROTTLING
com.android.server.power.PowerManagerService$BinderService.acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)void  ::  android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService$BinderService.acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)void  ::  android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService$BinderService.boostScreenBrightness(long)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.crash(java.lang.String)void  ::  android.permission.REBOOT
com.android.server.power.PowerManagerService$BinderService.goToSleep(long,int,int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.nap(long)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.powerHint(int,int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.reboot(boolean,java.lang.String,boolean)void  ::  android.permission.REBOOT, android.permission.RECOVERY
com.android.server.power.PowerManagerService$BinderService.rebootSafeMode(boolean,boolean)void  ::  android.permission.REBOOT
com.android.server.power.PowerManagerService$BinderService.releaseWakeLock(android.os.IBinder,int)void  ::  android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService$BinderService.setAttentionLight(boolean,int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.setPowerSaveMode(boolean)boolean  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.setTemporaryScreenBrightnessSettingOverride(int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.shutdown(boolean,java.lang.String,boolean)void  ::  android.permission.REBOOT
com.android.server.power.PowerManagerService$BinderService.updateWakeLockUids(android.os.IBinder,[int)void  ::  android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService$BinderService.updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)void  ::  android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService$BinderService.userActivity(long,int,int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService$BinderService.wakeUp(long,java.lang.String,java.lang.String)void  ::  android.permission.DEVICE_POWER
com.android.server.print.PrintManagerService$PrintManagerImpl.addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)void  ::  com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
com.android.server.print.PrintManagerService$PrintManagerImpl.cancelPrintJob(android.print.PrintJobId,int,int)void  ::  com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
com.android.server.print.PrintManagerService$PrintManagerImpl.getPrintJobInfo(android.print.PrintJobId,int,int)android.print.PrintJobInfo  ::  com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
com.android.server.print.PrintManagerService$PrintManagerImpl.getPrintJobInfos(int,int)java.util.List  ::  com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
com.android.server.print.PrintManagerService$PrintManagerImpl.print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)android.os.Bundle  ::  com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
com.android.server.print.PrintManagerService$PrintManagerImpl.restartPrintJob(android.print.PrintJobId,int,int)void  ::  com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
com.android.server.sip.SipService.close(java.lang.String,java.lang.String)void  ::  android.permission.USE_SIP
com.android.server.sip.SipService.createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)android.net.sip.ISipSession  ::  android.permission.USE_SIP
com.android.server.sip.SipService.getListOfProfiles(java.lang.String)android.net.sip.SipProfile[]  ::  android.permission.USE_SIP
com.android.server.sip.SipService.getPendingSession(java.lang.String,java.lang.String)android.net.sip.ISipSession  ::  android.permission.USE_SIP
com.android.server.sip.SipService.isOpened(java.lang.String,java.lang.String)boolean  ::  android.permission.USE_SIP
com.android.server.sip.SipService.isRegistered(java.lang.String,java.lang.String)boolean  ::  android.permission.USE_SIP
com.android.server.sip.SipService.open(android.net.sip.SipProfile,java.lang.String)void  ::  android.permission.USE_SIP
com.android.server.sip.SipService.open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)void  ::  android.permission.USE_SIP
com.android.server.sip.SipService.setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)void  ::  android.permission.USE_SIP
com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub.deleteSoundModel(android.os.ParcelUuid)void  ::  android.permission.MANAGE_SOUND_TRIGGER
com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub.getSoundModel(android.os.ParcelUuid)android.hardware.soundtrigger.SoundTrigger$GenericSoundModel  ::  android.permission.MANAGE_SOUND_TRIGGER
com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub.startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)int  ::  android.permission.MANAGE_SOUND_TRIGGER
com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub.stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)int  ::  android.permission.MANAGE_SOUND_TRIGGER
com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub.updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)void  ::  android.permission.MANAGE_SOUND_TRIGGER
com.android.server.statusbar.StatusBarManagerService.addTile(android.content.ComponentName)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.clearNotificationEffects()void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.clickTile(android.content.ComponentName)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.collapsePanels()void  ::  android.permission.EXPAND_STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.disable(int,android.os.IBinder,java.lang.String)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.disable2(int,android.os.IBinder,java.lang.String)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.disable2ForUser(int,android.os.IBinder,java.lang.String,int)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.disableForUser(int,android.os.IBinder,java.lang.String,int)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.expandNotificationsPanel()void  ::  android.permission.EXPAND_STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.expandSettingsPanel(java.lang.String)void  ::  android.permission.EXPAND_STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.handleSystemNavigationKey(int)void  ::  android.permission.EXPAND_STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.onClearAllNotifications(int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onNotificationActionClick(java.lang.String,int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onNotificationClear(java.lang.String,java.lang.String,int,int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onNotificationClick(java.lang.String)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onNotificationExpansionChanged(java.lang.String,boolean,boolean)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onNotificationVisibilityChanged([com.android.internal.statusbar.NotificationVisibility,[com.android.internal.statusbar.NotificationVisibility)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onPanelHidden()void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.onPanelRevealed(boolean,int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.registerStatusBar(com.android.internal.statusbar.IStatusBar,java.util.List,java.util.List,[int,java.util.List,android.graphics.Rect,android.graphics.Rect)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.statusbar.StatusBarManagerService.remTile(android.content.ComponentName)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.removeIcon(java.lang.String)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.setIconVisibility(java.lang.String,boolean)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.setImeWindowStatus(android.os.IBinder,int,int,boolean)void  ::  android.permission.STATUS_BAR
com.android.server.statusbar.StatusBarManagerService.setSystemUiVisibility(int,int,java.lang.String)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.tv.TvInputManagerService$BinderService.acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int)android.media.tv.ITvInputHardware  ::  android.permission.TV_INPUT_HARDWARE
com.android.server.tv.TvInputManagerService$BinderService.addBlockedRating(java.lang.String,int)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
com.android.server.tv.TvInputManagerService$BinderService.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig,int)boolean  ::  android.permission.CAPTURE_TV_INPUT
com.android.server.tv.TvInputManagerService$BinderService.getAvailableTvStreamConfigList(java.lang.String,int)java.util.List  ::  android.permission.CAPTURE_TV_INPUT
com.android.server.tv.TvInputManagerService$BinderService.getDvbDeviceList()java.util.List  ::  android.permission.DVB_DEVICE
com.android.server.tv.TvInputManagerService$BinderService.getHardwareList()java.util.List  ::  android.permission.TV_INPUT_HARDWARE
com.android.server.tv.TvInputManagerService$BinderService.openDvbDevice(android.media.tv.DvbDeviceInfo,int)android.os.ParcelFileDescriptor  ::  android.permission.DVB_DEVICE
com.android.server.tv.TvInputManagerService$BinderService.releaseTvInputHardware(int,android.media.tv.ITvInputHardware,int)void  ::  android.permission.TV_INPUT_HARDWARE
com.android.server.tv.TvInputManagerService$BinderService.removeBlockedRating(java.lang.String,int)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
com.android.server.tv.TvInputManagerService$BinderService.setParentalControlsEnabled(boolean,int)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
com.android.server.tv.TvInputManagerService$BinderService.unblockContent(android.os.IBinder,java.lang.String,int)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
com.android.server.tv.TvInputManagerService$ServiceCallback.addHardwareInput(int,android.media.tv.TvInputInfo)void  ::  android.permission.TV_INPUT_HARDWARE
com.android.server.tv.TvInputManagerService$ServiceCallback.addHdmiInput(int,android.media.tv.TvInputInfo)void  ::  android.permission.TV_INPUT_HARDWARE
com.android.server.tv.TvInputManagerService$ServiceCallback.removeHardwareInput(java.lang.String)void  ::  android.permission.TV_INPUT_HARDWARE
com.android.server.usage.UsageStatsService$BinderService.onCarrierPrivilegedAppsChanged()void  ::  android.permission.BIND_CARRIER_SERVICES
com.android.server.usage.UsageStatsService$BinderService.queryConfigurationStats(int,long,long,java.lang.String)android.content.pm.ParceledListSlice  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.usage.UsageStatsService$BinderService.queryEvents(long,long,java.lang.String)android.app.usage.UsageEvents  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.usage.UsageStatsService$BinderService.queryUsageStats(int,long,long,java.lang.String)android.content.pm.ParceledListSlice  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.usage.UsageStatsService$BinderService.setAppInactive(java.lang.String,boolean,int)void  ::  android.permission.CHANGE_APP_IDLE_STATE
com.android.server.usb.UsbService.allowUsbDebugging(boolean,java.lang.String)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.clearDefaults(java.lang.String,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.clearUsbDebuggingKeys()void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.denyUsbDebugging()void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.getPortStatus(java.lang.String)android.hardware.usb.UsbPortStatus  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.getPorts()android.hardware.usb.UsbPort[]  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.grantDevicePermission(android.hardware.usb.UsbDevice,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.hasDefaults(java.lang.String,int)boolean  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.isFunctionEnabled(java.lang.String)boolean  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setCurrentFunction(java.lang.String)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setPortRoles(java.lang.String,int,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setUsbDataUnlocked(boolean)void  ::  android.permission.MANAGE_USB
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.activeServiceSupportsAssist()boolean  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.activeServiceSupportsLaunchFromKeyguard()boolean  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.deleteKeyphraseSoundModel(int,java.lang.String)int  ::  android.permission.MANAGE_VOICE_KEYPHRASES
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getActiveServiceComponentName()android.content.ComponentName  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getKeyphraseSoundModel(int,java.lang.String)android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel  ::  android.permission.MANAGE_VOICE_KEYPHRASES
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.hideCurrentSession()void  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.isSessionRunning()boolean  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.launchVoiceAssistFromKeyguard()void  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.onLockscreenShown()void  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)void  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)boolean  ::  android.permission.ACCESS_VOICE_INTERACTION_SERVICE
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)int  ::  android.permission.MANAGE_VOICE_KEYPHRASES
com.android.server.wallpaper.WallpaperManagerService.clearWallpaper(java.lang.String,int,int)void  ::  android.permission.SET_WALLPAPER
com.android.server.wallpaper.WallpaperManagerService.setDimensionHints(int,int,java.lang.String)void  ::  android.permission.SET_WALLPAPER_HINTS
com.android.server.wallpaper.WallpaperManagerService.setDisplayPadding(android.graphics.Rect,java.lang.String)void  ::  android.permission.SET_WALLPAPER_HINTS
com.android.server.wallpaper.WallpaperManagerService.setLockWallpaperCallback(android.app.IWallpaperManagerCallback)boolean  ::  android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.wallpaper.WallpaperManagerService.setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)android.os.ParcelFileDescriptor  ::  android.permission.SET_WALLPAPER
com.android.server.wallpaper.WallpaperManagerService.setWallpaperComponent(android.content.ComponentName)void  ::  android.permission.SET_WALLPAPER_COMPONENT
com.android.server.wallpaper.WallpaperManagerService.setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)void  ::  android.permission.SET_WALLPAPER_COMPONENT
com.android.server.webkit.WebViewUpdateService$BinderService.changeProviderAndSetting(java.lang.String)java.lang.String  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.webkit.WebViewUpdateService$BinderService.enableFallbackLogic(boolean)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wifi.WifiServiceImpl.acquireMulticastLock(android.os.IBinder,java.lang.String)void  ::  android.permission.CHANGE_WIFI_MULTICAST_STATE
com.android.server.wifi.WifiServiceImpl.acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)boolean  ::  android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
com.android.server.wifi.WifiServiceImpl.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)int  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.addToBlacklist(java.lang.String)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.clearBlacklist()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.disableEphemeralNetwork(java.lang.String)void  ::  android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.disableNetwork(int)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.disconnect()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.enableAggressiveHandover(int)void  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.enableNetwork(int,boolean)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.enableVerboseLogging(int)void  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.enableWifiConnectivityManager(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiServiceImpl.factoryReset()void  ::  android.permission.CHANGE_WIFI_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiServiceImpl.getAggressiveHandover()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getAllowScansWithTraffic()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getConfigFile()java.lang.String  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getConfiguredNetworks()java.util.List  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getConnectionInfo()android.net.wifi.WifiInfo  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getConnectionStatistics()android.net.wifi.WifiConnectionStatistics  ::  android.permission.ACCESS_WIFI_STATE, android.permission.READ_WIFI_CREDENTIAL
com.android.server.wifi.WifiServiceImpl.getCountryCode()java.lang.String  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiServiceImpl.getCurrentNetwork()android.net.Network  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getDhcpInfo()android.net.DhcpInfo  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getEnableAutoJoinWhenAssociated()boolean  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getFrequencyBand()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getMatchingWifiConfig(android.net.wifi.ScanResult)android.net.wifi.WifiConfiguration  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getPrivilegedConfiguredNetworks()java.util.List  ::  android.permission.ACCESS_WIFI_STATE, android.permission.READ_WIFI_CREDENTIAL
com.android.server.wifi.WifiServiceImpl.getScanResults(java.lang.String)java.util.List  ::  android.permission.ACCESS_WIFI_STATE, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.PEERS_MAC_ADDRESS, android.permission.SCORE_NETWORKS
com.android.server.wifi.WifiServiceImpl.getSupportedFeatures()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getVerboseLoggingLevel()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getWifiApConfiguration()android.net.wifi.WifiConfiguration  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getWifiApEnabledState()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getWifiEnabledState()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getWifiServiceMessenger()android.os.Messenger  ::  android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.getWpsNfcConfigurationToken(int)java.lang.String  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiServiceImpl.initializeMulticastFiltering()void  ::  android.permission.CHANGE_WIFI_MULTICAST_STATE
com.android.server.wifi.WifiServiceImpl.isMulticastEnabled()boolean  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.isScanAlwaysAvailable()boolean  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.pingSupplicant()boolean  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.reassociate()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.reconnect()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.releaseMulticastLock()void  ::  android.permission.CHANGE_WIFI_MULTICAST_STATE
com.android.server.wifi.WifiServiceImpl.releaseWifiLock(android.os.IBinder)boolean  ::  android.permission.WAKE_LOCK
com.android.server.wifi.WifiServiceImpl.removeNetwork(int)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.reportActivityInfo()android.net.wifi.WifiActivityEnergyInfo  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.requestActivityInfo(android.os.ResultReceiver)void  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.saveConfiguration()boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.setAllowScansWithTraffic(int)void  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.setCountryCode(java.lang.String,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiServiceImpl.setEnableAutoJoinWhenAssociated(boolean)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.setFrequencyBand(int,boolean)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.setWifiApConfiguration(android.net.wifi.WifiConfiguration)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)void  ::  android.permission.CHANGE_WIFI_STATE, android.permission.TETHER_PRIVILEGED
com.android.server.wifi.WifiServiceImpl.setWifiEnabled(boolean)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiServiceImpl.startScan(android.net.wifi.ScanSettings,android.os.WorkSource)void  ::  android.permission.CHANGE_WIFI_STATE, android.permission.UPDATE_DEVICE_STATS
com.android.server.wifi.WifiServiceImpl.updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.wifi.p2p.WifiP2pServiceImpl.getMessenger()android.os.Messenger  ::  android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.p2p.WifiP2pServiceImpl.getP2pStateMachineMessenger()android.os.Messenger  ::  android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE, android.permission.CONNECTIVITY_INTERNAL, android.permission.LOCATION_HARDWARE
com.android.server.wifi.p2p.WifiP2pServiceImpl.setMiracastMode(int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wm.WindowManagerService.addAppToken(int,android.view.IApplicationToken,int,int,int,boolean,boolean,int,int,boolean,boolean,android.graphics.Rect,android.content.res.Configuration,int,boolean,boolean,int,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.addWindowToken(android.os.IBinder,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.clearForcedDisplayDensityForUser(int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.clearForcedDisplaySize(int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.clearWindowContentFrameStats(android.os.IBinder)boolean  ::  android.permission.FRAME_STATS
com.android.server.wm.WindowManagerService.disableKeyguard(android.os.IBinder,java.lang.String)void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.dismissKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.executeAppTransition()void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(android.view.IOnKeyguardExitResult)void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.freezeRotation(int)void  ::  android.permission.SET_ORIENTATION
com.android.server.wm.WindowManagerService.getWindowContentFrameStats(android.os.IBinder)android.view.WindowContentFrameStats  ::  android.permission.FRAME_STATS
com.android.server.wm.WindowManagerService.isViewServerRunning()boolean  ::  android.permission.DUMP
com.android.server.wm.WindowManagerService.keyguardGoingAway(int)void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.lockNow(android.os.Bundle)void  ::  android.permission.DEVICE_POWER
com.android.server.wm.WindowManagerService.notifyAppResumed(android.os.IBinder,boolean,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.notifyAppStopped(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.pauseKeyDispatching(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.prepareAppTransition(int,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.reenableKeyguard(android.os.IBinder)void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.registerDockedStackListener(android.view.IDockedStackListener)void  ::  android.permission.REGISTER_WINDOW_MANAGER_LISTENERS
com.android.server.wm.WindowManagerService.registerShortcutKey(long,com.android.internal.policy.IShortcutService)void  ::  android.permission.REGISTER_WINDOW_MANAGER_LISTENERS
com.android.server.wm.WindowManagerService.removeAppToken(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.removeWindowToken(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.requestAssistScreenshot(com.android.internal.app.IAssistScreenshotReceiver)boolean  ::  android.permission.READ_FRAME_BUFFER
com.android.server.wm.WindowManagerService.resumeKeyDispatching(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.screenshotApplications(android.os.IBinder,int,int,int,float)android.graphics.Bitmap  ::  android.permission.READ_FRAME_BUFFER
com.android.server.wm.WindowManagerService.screenshotWallpaper()android.graphics.Bitmap  ::  android.permission.READ_FRAME_BUFFER
com.android.server.wm.WindowManagerService.setAnimationScale(int,float)void  ::  android.permission.SET_ANIMATION_SCALE
com.android.server.wm.WindowManagerService.setAnimationScales([float)void  ::  android.permission.SET_ANIMATION_SCALE
com.android.server.wm.WindowManagerService.setAppOrientation(android.view.IApplicationToken,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.os.IBinder,boolean)boolean  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setAppTask(android.os.IBinder,int,int,android.graphics.Rect,android.content.res.Configuration,int,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setAppVisibility(android.os.IBinder,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setEventDispatching(boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setFocusedApp(android.os.IBinder,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setForcedDisplayDensityForUser(int,int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.setForcedDisplayScalingMode(int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.setForcedDisplaySize(int,int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.setNewConfiguration(android.content.res.Configuration)I[]  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setOverscan(int,int,int,int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.setRecentsVisibility(boolean)void  ::  android.permission.STATUS_BAR
com.android.server.wm.WindowManagerService.setTvPipVisibility(boolean)void  ::  android.permission.STATUS_BAR
com.android.server.wm.WindowManagerService.startAppFreezingScreen(android.os.IBinder,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.startFreezingScreen(int,int)void  ::  android.permission.FREEZE_SCREEN
com.android.server.wm.WindowManagerService.startViewServer(int)boolean  ::  android.permission.DUMP
com.android.server.wm.WindowManagerService.statusBarVisibilityChanged(int)void  ::  android.permission.STATUS_BAR
com.android.server.wm.WindowManagerService.stopAppFreezingScreen(android.os.IBinder,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.stopFreezingScreen()void  ::  android.permission.FREEZE_SCREEN
com.android.server.wm.WindowManagerService.stopViewServer()boolean  ::  android.permission.DUMP
com.android.server.wm.WindowManagerService.thawRotation()void  ::  android.permission.SET_ORIENTATION
com.android.server.wm.WindowManagerService.updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)android.content.res.Configuration  ::  android.permission.MANAGE_APP_TOKENS
