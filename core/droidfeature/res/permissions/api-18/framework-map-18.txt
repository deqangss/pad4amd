android.accounts.AbstractAccountAuthenticator$Transport.addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[java.lang.String,android.os.Bundle)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.getAccountCredentialsForCloning(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[java.lang.String)void  ::  android.permission.ACCOUNT_MANAGER
android.accounts.AbstractAccountAuthenticator$Transport.updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)void  ::  android.permission.ACCOUNT_MANAGER
android.media.AudioService.registerMediaButtonEventReceiverForCalls(android.content.ComponentName)void  ::  android.permission.MODIFY_PHONE_STATE
android.media.AudioService.setBluetoothScoOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioService.setMode(int,android.os.IBinder)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioService.setRingtonePlayer(android.media.IRingtonePlayer)void  ::  android.permission.REMOTE_AUDIO_PLAYBACK
android.media.AudioService.setSpeakerphoneOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioService.startBluetoothSco(android.os.IBinder,int)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioService.stopBluetoothSco(android.os.IBinder)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioService.unregisterMediaButtonEventReceiverForCalls()void  ::  android.permission.MODIFY_PHONE_STATE
android.net.wifi.p2p.WifiP2pService.getMessenger()android.os.Messenger  ::  android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
android.net.wifi.p2p.WifiP2pService.setMiracastMode(int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.isA2dpPlaying(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.cancelBondProcess(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.cancelDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)android.os.ParcelFileDescriptor  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.createBond(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)android.os.ParcelFileDescriptor  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.disable()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.enable()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.enableNoAutoConnect()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.fetchRemoteUuids(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getAdapterConnectionState()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getAddress()java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getBondState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getBondedDevices()android.bluetooth.BluetoothDevice[]  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getDiscoverableTimeout()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getName()java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getProfileConnectionState(int)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteAlias(android.bluetooth.BluetoothDevice)java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteClass(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteName(android.bluetooth.BluetoothDevice)java.lang.String  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteType(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getRemoteUuids(android.bluetooth.BluetoothDevice)android.os.ParcelUuid[]  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getScanMode()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getState()int  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.getUuids()android.os.ParcelUuid[]  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isDiscovering()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.isEnabled()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.removeBond(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setDiscoverableTimeout(int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setName(java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setPasskey(android.bluetooth.BluetoothDevice,boolean,int,[byte)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setPin(android.bluetooth.BluetoothDevice,boolean,int,[byte)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.setScanMode(int,int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder.startDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.addCharacteristic(int,android.os.ParcelUuid,int,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.addDescriptor(int,android.os.ParcelUuid,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.addIncludedService(int,int,int,android.os.ParcelUuid)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.beginReliableWrite(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.clearServices(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.clientConnect(int,java.lang.String,boolean)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.clientDisconnect(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.discoverServices(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.endReliableWrite(int,java.lang.String,boolean)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.endServiceDeclaration(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.readRemoteRssi(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.refreshDevice(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.removeService(int,int,int,android.os.ParcelUuid)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,[byte)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.sendResponse(int,java.lang.String,int,int,int,[byte)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.serverConnect(int,java.lang.String,boolean)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.serverDisconnect(int,java.lang.String)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.startScan(int,boolean)void  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.startScanWithUuids(int,boolean,[android.os.ParcelUuid)void  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.stopScan(int,boolean)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.unregisterClient(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.unregisterServer(int)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,[byte)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.gatt.GattService$BluetoothGattBinder.writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int,int,[byte)void  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getConnectedHealthDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getHealthDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)android.os.ParcelFileDescriptor  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder.unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.clccResponse(int,int,int,int,boolean,java.lang.String,int)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.connectAudio()boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.disconnectAudio()boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getConnectionState(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.isAudioConnected(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.isAudioOn()boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.phoneStateChanged(int,int,int,java.lang.String,int)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.roamChanged(boolean)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.startVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder.stopVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getPriority(android.bluetooth.BluetoothDevice)int  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getProtocolMode(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.getReport(android.bluetooth.BluetoothDevice,byte,byte,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.sendData(android.bluetooth.BluetoothDevice,java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.setPriority(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.setProtocolMode(android.bluetooth.BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder.virtualUnplug(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.bluetooth.pan.PanService$BluetoothPanBinder.connect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.disconnect(android.bluetooth.BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.getConnectedDevices()java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.getDevicesMatchingConnectionStates([int)java.util.List  ::  android.permission.BLUETOOTH
com.android.bluetooth.pan.PanService$BluetoothPanBinder.setBluetoothTethering(boolean)void  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
com.android.internal.telephony.IccPhoneBookInterfaceManager.getAdnRecordsInEf(int)java.util.List  ::  android.permission.READ_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManager.getAdnRecordsInEf(int)java.util.List  ::  android.permission.READ_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.getAdnRecordsInEf(int)java.util.List  ::  android.permission.READ_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy.updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)boolean  ::  android.permission.WRITE_CONTACTS
com.android.internal.telephony.IccSmsInterfaceManager.copyMessageToIccEf(java.lang.String,int,[byte,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManager.copyMessageToIccEf(java.lang.String,int,[byte,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManager.getAllMessagesFromIccEf(java.lang.String)java.util.List  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.IccSmsInterfaceManager.getAllMessagesFromIccEf(java.lang.String)java.util.List  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.IccSmsInterfaceManager.sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.IccSmsInterfaceManager.sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.IccSmsInterfaceManager.sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)void  ::  android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.IccSmsInterfaceManager.sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)void  ::  android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.IccSmsInterfaceManager.sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.IccSmsInterfaceManager.sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
com.android.internal.telephony.IccSmsInterfaceManager.updateMessageOnIccEf(java.lang.String,int,int,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManager.updateMessageOnIccEf(java.lang.String,int,int,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManagerProxy.copyMessageToIccEf(java.lang.String,int,[byte,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManagerProxy.getAllMessagesFromIccEf(java.lang.String)java.util.List  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)void  ::  android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManagerProxy.sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
com.android.internal.telephony.IccSmsInterfaceManagerProxy.updateMessageOnIccEf(java.lang.String,int,int,[byte)boolean  ::  android.permission.RECEIVE_SMS, android.permission.SEND_SMS
com.android.internal.telephony.PhoneSubInfo.getCompleteVoiceMailNumber()java.lang.String  ::  android.permission.CALL_PRIVILEGED
com.android.internal.telephony.PhoneSubInfo.getDeviceId()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getDeviceSvn()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getGroupIdLevel1()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getIccSerialNumber()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getIsimDomain()java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getIsimImpi()java.lang.String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getIsimImpu()java.lang.String[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getLine1AlphaTag()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getLine1Number()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getMsisdn()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getSubscriberId()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getVoiceMailAlphaTag()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.PhoneSubInfo.getVoiceMailNumber()java.lang.String  ::  android.permission.READ_PHONE_STATE
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.disableCellBroadcast(int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.disableCellBroadcastRange(int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.enableCellBroadcast(int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.cdma.RuimSmsInterfaceManager.enableCellBroadcastRange(int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.gsm.SimSmsInterfaceManager.disableCellBroadcast(int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.gsm.SimSmsInterfaceManager.disableCellBroadcastRange(int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcast(int)boolean  ::  android.permission.RECEIVE_SMS
com.android.internal.telephony.gsm.SimSmsInterfaceManager.enableCellBroadcastRange(int,int)boolean  ::  android.permission.RECEIVE_SMS
com.android.nfc.NfcService$NfcAdapterExtrasService.authenticate(java.lang.String,[byte)void  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterExtrasService.close(java.lang.String,android.os.IBinder)android.os.Bundle  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterExtrasService.getCardEmulationRoute(java.lang.String)int  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterExtrasService.getDriverName(java.lang.String)java.lang.String  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterExtrasService.open(java.lang.String,android.os.IBinder)android.os.Bundle  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterExtrasService.setCardEmulationRoute(java.lang.String,int)void  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterExtrasService.transceive(java.lang.String,[byte)android.os.Bundle  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterService.disable(boolean)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc.NfcService$NfcAdapterService.disableNdefPush()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc.NfcService$NfcAdapterService.dispatch(android.nfc.Tag)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc.NfcService$NfcAdapterService.enable()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc.NfcService$NfcAdapterService.enableNdefPush()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc.NfcService$NfcAdapterService.getNfcAdapterExtrasInterface(java.lang.String)android.nfc.INfcAdapterExtras  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterService.setForegroundDispatch(android.app.PendingIntent,[android.content.IntentFilter,android.nfc.TechListParcel)void  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterService.setNdefPushCallback(android.nfc.INdefPushCallback)void  ::  android.permission.NFC
com.android.nfc.NfcService$NfcAdapterService.setP2pModes(int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc.NfcService$TagService.close(int)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.connect(int,int)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.formatNdef(int,[byte)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.getTechList(int)I[]  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.getTimeout(int)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.isNdef(int)boolean  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.ndefMakeReadOnly(int)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.ndefRead(int)android.nfc.NdefMessage  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.ndefWrite(int,android.nfc.NdefMessage)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.reconnect(int)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.rediscover(int)android.nfc.Tag  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.resetTimeouts()void  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.setTimeout(int,int)int  ::  android.permission.NFC
com.android.nfc.NfcService$TagService.transceive(int,[byte,boolean)android.nfc.TransceiveResult  ::  android.permission.NFC
com.android.phone.PhoneInterfaceManager.answerRingingCall()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.call(java.lang.String,java.lang.String)void  ::  android.permission.CALL_PHONE
com.android.phone.PhoneInterfaceManager.cancelMissedCallsNotification()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.disableApnType(java.lang.String)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.disableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.disableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
com.android.phone.PhoneInterfaceManager.enableApnType(java.lang.String)int  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.enableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.enableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
com.android.phone.PhoneInterfaceManager.endCall()boolean  ::  android.permission.CALL_PHONE
com.android.phone.PhoneInterfaceManager.getAllCellInfo()java.util.List  ::  android.permission.ACCESS_FINE_LOCATION
com.android.phone.PhoneInterfaceManager.getCellLocation()android.os.Bundle  ::  android.permission.ACCESS_FINE_LOCATION
com.android.phone.PhoneInterfaceManager.getNeighboringCellInfo(java.lang.String)java.util.List  ::  android.permission.ACCESS_FINE_LOCATION
com.android.phone.PhoneInterfaceManager.handlePinMmi(java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.isSimPinEnabled()boolean  ::  android.permission.READ_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setRadio(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.setRadioPower(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.silenceRinger()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPin(java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.supplyPuk(java.lang.String,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
com.android.phone.PhoneInterfaceManager.toggleRadioOnOff()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.providers.contacts.ContactsProvider2.getType(android.net.Uri)java.lang.String  ::  android.permission.READ_SOCIAL_STREAM
com.android.server.AlarmManagerService.setTime(long)void  ::  android.permission.SET_TIME
com.android.server.AlarmManagerService.setTimeZone(java.lang.String)void  ::  android.permission.SET_TIME_ZONE
com.android.server.AppOpsService.checkOperation(int,int,java.lang.String)int  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.finishOperation(int,int,java.lang.String)void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.getOpsForPackage(int,java.lang.String,[int)java.util.List  ::  android.permission.GET_APP_OPS_STATS
com.android.server.AppOpsService.getPackagesForOps([int)java.util.List  ::  android.permission.GET_APP_OPS_STATS
com.android.server.AppOpsService.noteOperation(int,int,java.lang.String)int  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.resetAllModes()void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.setMode(int,int,java.lang.String,int)void  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppOpsService.startOperation(int,int,java.lang.String)int  ::  android.permission.UPDATE_APP_OPS_STATS
com.android.server.AppWidgetService.bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.bindAppWidgetIdIfAllowed(java.lang.String,int,android.content.ComponentName,android.os.Bundle,int)boolean  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.bindRemoteViewsService(int,android.content.Intent,android.os.IBinder,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.deleteAppWidgetId(int,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.getAppWidgetInfo(int,int)android.appwidget.AppWidgetProviderInfo  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.getAppWidgetOptions(int,int)android.os.Bundle  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.getAppWidgetViews(int,int)android.widget.RemoteViews  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.hasBindAppWidgetPermission(java.lang.String,int)boolean  ::  android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
com.android.server.AppWidgetService.notifyAppWidgetViewDataChanged([int,int,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.partiallyUpdateAppWidgetIds([int,android.widget.RemoteViews,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.setBindAppWidgetPermission(java.lang.String,boolean,int)void  ::  android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
com.android.server.AppWidgetService.unbindRemoteViewsService(int,android.content.Intent,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.updateAppWidgetIds([int,android.widget.RemoteViews,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.updateAppWidgetOptions(int,android.os.Bundle,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.AppWidgetService.updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews,int)void  ::  android.permission.BIND_APPWIDGET
com.android.server.BackupManagerService$ActiveRestoreSession.getAvailableRestoreSets(android.app.backup.IRestoreObserver)int  ::  android.permission.BACKUP
com.android.server.BackupManagerService$ActiveRestoreSession.restoreAll(long,android.app.backup.IRestoreObserver)int  ::  android.permission.BACKUP
com.android.server.BackupManagerService$ActiveRestoreSession.restorePackage(java.lang.String,android.app.backup.IRestoreObserver)int  ::  android.permission.BACKUP
com.android.server.BackupManagerService$ActiveRestoreSession.restoreSome(long,android.app.backup.IRestoreObserver,[java.lang.String)int  ::  android.permission.BACKUP
com.android.server.BackupManagerService.acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.backupNow()void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.beginRestoreSession(java.lang.String,java.lang.String)android.app.backup.IRestoreSession  ::  android.permission.BACKUP
com.android.server.BackupManagerService.clearBackupData(java.lang.String)void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.dataChanged(java.lang.String)void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,[java.lang.String)void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.fullRestore(android.os.ParcelFileDescriptor)void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.getConfigurationIntent(java.lang.String)android.content.Intent  ::  android.permission.BACKUP
com.android.server.BackupManagerService.getCurrentTransport()java.lang.String  ::  android.permission.BACKUP
com.android.server.BackupManagerService.getDestinationString(java.lang.String)java.lang.String  ::  android.permission.BACKUP
com.android.server.BackupManagerService.hasBackupPassword()boolean  ::  android.permission.BACKUP
com.android.server.BackupManagerService.isBackupEnabled()boolean  ::  android.permission.BACKUP
com.android.server.BackupManagerService.listAllTransports()java.lang.String[]  ::  android.permission.BACKUP
com.android.server.BackupManagerService.selectBackupTransport(java.lang.String)java.lang.String  ::  android.permission.BACKUP
com.android.server.BackupManagerService.setAutoRestore(boolean)void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.setBackupEnabled(boolean)void  ::  android.permission.BACKUP
com.android.server.BackupManagerService.setBackupPassword(java.lang.String,java.lang.String)boolean  ::  android.permission.BACKUP
com.android.server.BackupManagerService.setBackupProvisioned(boolean)void  ::  android.permission.BACKUP
com.android.server.BluetoothManagerService.disable(boolean)boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.server.BluetoothManagerService.enable()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.server.BluetoothManagerService.enableNoAutoConnect()boolean  ::  android.permission.BLUETOOTH_ADMIN
com.android.server.BluetoothManagerService.getAddress()java.lang.String  ::  android.permission.BLUETOOTH
com.android.server.BluetoothManagerService.getName()java.lang.String  ::  android.permission.BLUETOOTH
com.android.server.BluetoothManagerService.registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)void  ::  android.permission.BLUETOOTH
com.android.server.BluetoothManagerService.unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)void  ::  android.permission.BLUETOOTH
com.android.server.BluetoothManagerService.unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)void  ::  android.permission.BLUETOOTH
com.android.server.ConnectivityService.captivePortalCheckComplete(android.net.NetworkInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.findConnectionTypeForIface(java.lang.String)int  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getActiveLinkProperties()android.net.LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getActiveNetworkInfo()android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getActiveNetworkInfoForUid(int)android.net.NetworkInfo  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.getActiveNetworkQuotaInfo()android.net.NetworkQuotaInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getAllNetworkInfo()android.net.NetworkInfo[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getAllNetworkState()android.net.NetworkState[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getLastTetherError(java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getLinkProperties(int)android.net.LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getMobileDataEnabled()boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getNetworkInfo(int)android.net.NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getNetworkPreference()int  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableBluetoothRegexs()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableIfaces()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableUsbRegexs()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetherableWifiRegexs()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetheredIfacePairs()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetheredIfaces()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.getTetheringErroredIfaces()java.lang.String[]  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.isActiveNetworkMetered()boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.isNetworkSupported(int)boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.isTetheringSupported()boolean  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.ConnectivityService.reportInetCondition(int,int)void  ::  android.permission.STATUS_BAR
com.android.server.ConnectivityService.requestNetworkTransitionWakelock(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.requestRouteToHost(int,int)boolean  ::  android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.requestRouteToHostAddress(int,[byte)boolean  ::  android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setDataDependency(int,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setGlobalProxy(android.net.ProxyProperties)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.setMobileDataEnabled(boolean)void  ::  android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.setNetworkPreference(int)void  ::  android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.setPolicyDataEnable(int,boolean)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.ConnectivityService.setRadio(int,boolean)boolean  ::  android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.setRadios(boolean)boolean  ::  android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.setUsbTethering(boolean)int  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.startLegacyVpn(com.android.internal.net.VpnProfile)void  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)int  ::  android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.stopUsingNetworkFeature(int,java.lang.String)int  ::  android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.supplyMessenger(int,android.os.Messenger)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.ConnectivityService.tether(java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.untether(java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
com.android.server.ConnectivityService.updateLockdownVpn()boolean  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
com.android.server.DevicePolicyManagerService.getActiveAdmins(int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getCameraDisabled(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getCurrentFailedPasswordAttempts(int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getGlobalProxyAdmin(int)android.content.ComponentName  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getKeyguardDisabledFeatures(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getMaximumTimeToLock(android.content.ComponentName,int)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordExpiration(android.content.ComponentName,int)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordExpirationTimeout(android.content.ComponentName,int)long  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordHistoryLength(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordMinimumLength(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordMinimumLetters(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordMinimumLowerCase(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordMinimumNonLetter(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordMinimumNumeric(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordMinimumSymbols(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordMinimumUpperCase(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getPasswordQuality(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getStorageEncryption(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.getStorageEncryptionStatus(int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.hasGrantedPolicy(android.content.ComponentName,int,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.isActivePasswordSufficient(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.isAdminActive(android.content.ComponentName,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.lockNow()void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.packageHasActiveAdmins(java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.removeActiveAdmin(android.content.ComponentName,int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.reportFailedPasswordAttempt(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.reportSuccessfulPasswordAttempt(int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.resetPassword(java.lang.String,int,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setActiveAdmin(android.content.ComponentName,boolean,int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setActivePasswordState(int,int,int,int,int,int,int,int,int)void  ::  android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setCameraDisabled(android.content.ComponentName,boolean,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)android.content.ComponentName  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setKeyguardDisabledFeatures(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setMaximumTimeToLock(android.content.ComponentName,long,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordExpirationTimeout(android.content.ComponentName,long,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordHistoryLength(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordMinimumLength(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordMinimumLetters(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordMinimumLowerCase(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordMinimumNonLetter(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordMinimumNumeric(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordMinimumSymbols(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordMinimumUpperCase(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setPasswordQuality(android.content.ComponentName,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.setStorageEncryption(android.content.ComponentName,boolean,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DevicePolicyManagerService.wipeData(int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.DropBoxManagerService.getNextEntry(java.lang.String,long)android.os.DropBoxManager$Entry  ::  android.permission.READ_LOGS
com.android.server.InputMethodManagerService.addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getCurrentInputMethodSubtype()android.view.inputmethod.InputMethodSubtype  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getEnabledInputMethodList()java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getInputMethodList()java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.getLastInputMethodSubtype()android.view.inputmethod.InputMethodSubtype  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.hideMySoftInput(android.os.IBinder,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.registerSuggestionSpansForNotification([android.text.style.SuggestionSpan)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.removeClient(com.android.internal.view.IInputMethodClient)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.setAdditionalInputMethodSubtypes(java.lang.String,[android.view.inputmethod.InputMethodSubtype)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.setInputMethod(android.os.IBinder,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.setInputMethodEnabled(java.lang.String,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.showMySoftInput(android.os.IBinder,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.startInput(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,int)com.android.internal.view.InputBindResult  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.InputMethodManagerService.switchToLastInputMethod(android.os.IBinder)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.switchToNextInputMethod(android.os.IBinder,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext)com.android.internal.view.InputBindResult  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.LocationManagerService.addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LocationManagerService.clearTestProviderEnabled(java.lang.String)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LocationManagerService.clearTestProviderLocation(java.lang.String)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LocationManagerService.clearTestProviderStatus(java.lang.String)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LocationManagerService.getBestProvider(android.location.Criteria,boolean)java.lang.String  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.getLastLocation(android.location.LocationRequest,java.lang.String)android.location.Location  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.getProviderProperties(java.lang.String)com.android.internal.location.ProviderProperties  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.getProviders(android.location.Criteria,boolean)java.util.List  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.isProviderEnabled(java.lang.String)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.removeTestProvider(java.lang.String)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LocationManagerService.removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.reportLocation(android.location.Location,boolean)void  ::  android.permission.INSTALL_LOCATION_PROVIDER
com.android.server.LocationManagerService.requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
com.android.server.LocationManagerService.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
com.android.server.LocationManagerService.setTestProviderEnabled(java.lang.String,boolean)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LocationManagerService.setTestProviderLocation(java.lang.String,android.location.Location)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LocationManagerService.setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)void  ::  android.permission.ACCESS_MOCK_LOCATION
com.android.server.LockSettingsService.getBoolean(java.lang.String,boolean,int)boolean  ::  android.permission.READ_PROFILE
com.android.server.LockSettingsService.getLong(java.lang.String,long,int)long  ::  android.permission.READ_PROFILE
com.android.server.LockSettingsService.getString(java.lang.String,java.lang.String,int)java.lang.String  ::  android.permission.READ_PROFILE
com.android.server.MountService.changeEncryptionPassword(java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)int  ::  android.permission.ASEC_CREATE
com.android.server.MountService.decryptStorage(java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.destroySecureContainer(java.lang.String,boolean)int  ::  android.permission.ASEC_DESTROY
com.android.server.MountService.encryptStorage(java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.finalizeSecureContainer(java.lang.String)int  ::  android.permission.ASEC_CREATE
com.android.server.MountService.fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)int  ::  android.permission.ASEC_CREATE
com.android.server.MountService.formatVolume(java.lang.String)int  ::  android.permission.MOUNT_FORMAT_FILESYSTEMS
com.android.server.MountService.getEncryptionState()int  ::  android.permission.CRYPT_KEEPER
com.android.server.MountService.getSecureContainerFilesystemPath(java.lang.String)java.lang.String  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.getSecureContainerList()java.lang.String[]  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.getSecureContainerPath(java.lang.String)java.lang.String  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.getStorageUsers(java.lang.String)I[]  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.getVolumeList()android.os.storage.StorageVolume[]  ::  android.permission.ACCESS_ALL_EXTERNAL_STORAGE
com.android.server.MountService.isSecureContainerMounted(java.lang.String)boolean  ::  android.permission.ASEC_ACCESS
com.android.server.MountService.mountSecureContainer(java.lang.String,java.lang.String,int)int  ::  android.permission.ASEC_MOUNT_UNMOUNT
com.android.server.MountService.mountVolume(java.lang.String)int  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.renameSecureContainer(java.lang.String,java.lang.String)int  ::  android.permission.ASEC_RENAME
com.android.server.MountService.setUsbMassStorageEnabled(boolean)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.shutdown(android.os.storage.IMountShutdownObserver)void  ::  android.permission.SHUTDOWN
com.android.server.MountService.unmountSecureContainer(java.lang.String,boolean)int  ::  android.permission.ASEC_MOUNT_UNMOUNT
com.android.server.MountService.unmountVolume(java.lang.String,boolean,boolean)void  ::  android.permission.MOUNT_UNMOUNT_FILESYSTEMS
com.android.server.MountService.verifyEncryptionPassword(java.lang.String)int  ::  android.permission.CRYPT_KEEPER
com.android.server.NetworkManagementService.addIdleTimer(java.lang.String,int,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.addRoute(java.lang.String,android.net.RouteInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.addSecondaryRoute(java.lang.String,android.net.RouteInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.clearDnsInterfaceForPid(int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.clearInterfaceAddresses(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.detachPppd(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.disableIpv6(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.disableNat(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.enableIpv6(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.enableNat(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.flushDefaultDnsCache()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.flushInterfaceDnsCache(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getDnsForwarders()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getInterfaceConfig(java.lang.String)android.net.InterfaceConfiguration  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getIpForwardingEnabled()boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsDetail()android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsSummaryDev()android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsSummaryXt()android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsTethering([java.lang.String)android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getNetworkStatsUidDetail(int)android.net.NetworkStats  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.getRoutes(java.lang.String)android.net.RouteInfo[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.isBandwidthControlEnabled()boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.isClatdStarted()boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.isTetheringStarted()boolean  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.listInterfaces()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.listTetheredInterfaces()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.listTtys()java.lang.String[]  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.registerObserver(android.net.INetworkManagementEventObserver)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeIdleTimer(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeInterfaceAlert(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeInterfaceQuota(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeRoute(java.lang.String,android.net.RouteInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.removeSecondaryRoute(java.lang.String,android.net.RouteInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDefaultInterfaceForDns(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDnsForwarders([java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDnsInterfaceForPid(java.lang.String,int)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setDnsServersForInterface(java.lang.String,[java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setGlobalAlert(long)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceAlert(java.lang.String,long)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceDown(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceQuota(java.lang.String,long)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setInterfaceUp(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setIpForwardingEnabled(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.setUidNetworkRules(int,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.shutdown()void  ::  android.permission.SHUTDOWN
com.android.server.NetworkManagementService.startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.startClatd(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.startTethering([java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.stopAccessPoint(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.stopClatd()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.stopTethering()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.tetherInterface(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.unregisterObserver(android.net.INetworkManagementEventObserver)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.untetherInterface(java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NetworkManagementService.wifiFirmwareReload(java.lang.String,java.lang.String)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.NotificationManagerService.getActiveNotifications(java.lang.String)android.service.notification.StatusBarNotification[]  ::  android.permission.ACCESS_NOTIFICATIONS
com.android.server.NotificationManagerService.getHistoricalNotifications(java.lang.String,int)android.service.notification.StatusBarNotification[]  ::  android.permission.ACCESS_NOTIFICATIONS
com.android.server.NsdService.getMessenger()android.os.Messenger  ::  android.permission.INTERNET
com.android.server.NsdService.setEnabled(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.SerialService.getSerialPorts()java.lang.String[]  ::  android.permission.SERIAL_PORT
com.android.server.SerialService.openSerialPort(java.lang.String)android.os.ParcelFileDescriptor  ::  android.permission.SERIAL_PORT
com.android.server.StatusBarManagerService.collapsePanels()void  ::  android.permission.EXPAND_STATUS_BAR
com.android.server.StatusBarManagerService.disable(int,android.os.IBinder,java.lang.String)void  ::  android.permission.STATUS_BAR
com.android.server.StatusBarManagerService.expandNotificationsPanel()void  ::  android.permission.EXPAND_STATUS_BAR
com.android.server.StatusBarManagerService.expandSettingsPanel()void  ::  android.permission.EXPAND_STATUS_BAR
com.android.server.StatusBarManagerService.onClearAllNotifications()void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.StatusBarManagerService.onNotificationClear(java.lang.String,java.lang.String,int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.StatusBarManagerService.onNotificationClick(java.lang.String,java.lang.String,int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.StatusBarManagerService.onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.StatusBarManagerService.onPanelRevealed()void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.StatusBarManagerService.registerStatusBar(com.android.internal.statusbar.IStatusBar,com.android.internal.statusbar.StatusBarIconList,java.util.List,java.util.List,[int,java.util.List)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.StatusBarManagerService.removeIcon(java.lang.String)void  ::  android.permission.STATUS_BAR
com.android.server.StatusBarManagerService.setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)void  ::  android.permission.STATUS_BAR
com.android.server.StatusBarManagerService.setIconVisibility(java.lang.String,boolean)void  ::  android.permission.STATUS_BAR
com.android.server.StatusBarManagerService.setImeWindowStatus(android.os.IBinder,int,int)void  ::  android.permission.STATUS_BAR
com.android.server.StatusBarManagerService.setSystemUiVisibility(int,int)void  ::  android.permission.STATUS_BAR_SERVICE
com.android.server.StatusBarManagerService.topAppWindowChanged(boolean)void  ::  android.permission.STATUS_BAR
com.android.server.TelephonyRegistry.listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCallForwardingChanged(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCallState(int,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCellInfo(java.util.List)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyCellLocation(android.os.Bundle)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataActivity(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyDataConnectionFailed(java.lang.String,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyMessageWaitingChanged(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyOtaspChanged(int)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifyServiceState(android.telephony.ServiceState)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TelephonyRegistry.notifySignalStrength(android.telephony.SignalStrength)void  ::  android.permission.MODIFY_PHONE_STATE
com.android.server.TextServicesManagerService.setCurrentSpellChecker(java.lang.String,java.lang.String)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.TextServicesManagerService.setCurrentSpellCheckerSubtype(java.lang.String,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.TextServicesManagerService.setSpellCheckerEnabled(boolean)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.UpdateLockService.acquireUpdateLock(android.os.IBinder,java.lang.String)void  ::  android.permission.UPDATE_LOCK
com.android.server.UpdateLockService.releaseUpdateLock(android.os.IBinder)void  ::  android.permission.UPDATE_LOCK
com.android.server.VibratorService.cancelVibrate(android.os.IBinder)void  ::  android.permission.VIBRATE
com.android.server.VibratorService.vibrate(int,java.lang.String,long,android.os.IBinder)void  ::  android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
com.android.server.VibratorService.vibratePattern(int,java.lang.String,[long,int,android.os.IBinder)void  ::  android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
com.android.server.WallpaperManagerService.setDimensionHints(int,int)void  ::  android.permission.SET_WALLPAPER_HINTS
com.android.server.WallpaperManagerService.setWallpaper(java.lang.String)android.os.ParcelFileDescriptor  ::  android.permission.SET_WALLPAPER
com.android.server.WallpaperManagerService.setWallpaperComponent(android.content.ComponentName)void  ::  android.permission.SET_WALLPAPER_COMPONENT
com.android.server.accessibility.AccessibilityManagerService$Service.findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.findAccessibilityNodeInfosByViewId(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService$Service.performGlobalAction(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)int  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.addClient(android.view.accessibility.IAccessibilityManagerClient,int)int  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.getEnabledAccessibilityServiceList(int,int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.getInstalledAccessibilityServiceList(int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.interrupt(int)void  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.removeAccessibilityInteractionConnection(android.view.IWindow)void  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accessibility.AccessibilityManagerService.temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)void  ::  temporaryEnableAccessibilityStateUntilKeyguardRemoved
com.android.server.accounts.AccountManagerService.addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[java.lang.String,boolean,android.os.Bundle)void  ::  android.permission.MANAGE_ACCOUNTS
com.android.server.accounts.AccountManagerService.addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)boolean  ::  android.permission.AUTHENTICATE_ACCOUNTS
com.android.server.accounts.AccountManagerService.clearPassword(android.accounts.Account)void  ::  android.permission.MANAGE_ACCOUNTS
com.android.server.accounts.AccountManagerService.confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)void  ::  android.permission.MANAGE_ACCOUNTS
com.android.server.accounts.AccountManagerService.editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)void  ::  android.permission.MANAGE_ACCOUNTS
com.android.server.accounts.AccountManagerService.getAccounts(java.lang.String)android.accounts.Account[]  ::  android.permission.GET_ACCOUNTS
com.android.server.accounts.AccountManagerService.getAccountsAsUser(java.lang.String,int)android.accounts.Account[]  ::  android.permission.GET_ACCOUNTS
com.android.server.accounts.AccountManagerService.getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[java.lang.String)void  ::  android.permission.GET_ACCOUNTS
com.android.server.accounts.AccountManagerService.getAccountsByTypeForPackage(java.lang.String,java.lang.String)android.accounts.Account[]  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.accounts.AccountManagerService.getAccountsForPackage(java.lang.String,int)android.accounts.Account[]  ::  android.permission.GET_ACCOUNTS
com.android.server.accounts.AccountManagerService.getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)void  ::  android.permission.USE_CREDENTIALS
com.android.server.accounts.AccountManagerService.getPassword(android.accounts.Account)java.lang.String  ::  android.permission.AUTHENTICATE_ACCOUNTS
com.android.server.accounts.AccountManagerService.getUserData(android.accounts.Account,java.lang.String)java.lang.String  ::  android.permission.AUTHENTICATE_ACCOUNTS
com.android.server.accounts.AccountManagerService.hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[java.lang.String)void  ::  android.permission.GET_ACCOUNTS
com.android.server.accounts.AccountManagerService.invalidateAuthToken(java.lang.String,java.lang.String)void  ::  android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS
com.android.server.accounts.AccountManagerService.peekAuthToken(android.accounts.Account,java.lang.String)java.lang.String  ::  android.permission.AUTHENTICATE_ACCOUNTS
com.android.server.accounts.AccountManagerService.removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)void  ::  android.permission.MANAGE_ACCOUNTS
com.android.server.accounts.AccountManagerService.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)void  ::  android.permission.AUTHENTICATE_ACCOUNTS
com.android.server.accounts.AccountManagerService.setPassword(android.accounts.Account,java.lang.String)void  ::  android.permission.AUTHENTICATE_ACCOUNTS
com.android.server.accounts.AccountManagerService.setUserData(android.accounts.Account,java.lang.String,java.lang.String)void  ::  android.permission.AUTHENTICATE_ACCOUNTS
com.android.server.accounts.AccountManagerService.updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)void  ::  android.permission.MANAGE_ACCOUNTS
com.android.server.am.ActivityManagerService.activitySlept(android.os.IBinder)void  ::  android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)void  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.bindBackupAgent(android.content.pm.ApplicationInfo,int)boolean  ::  android.permission.BACKUP, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,int)int  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.clearPendingBackup()void  ::  android.permission.BACKUP
com.android.server.am.ActivityManagerService.crashApplication(int,int,java.lang.String,java.lang.String)void  ::  android.permission.FORCE_STOP_PACKAGES
com.android.server.am.ActivityManagerService.dismissKeyguardOnNextActivity()void  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)boolean  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.finishHeavyWeightApp()void  ::  android.permission.FORCE_STOP_PACKAGES, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)void  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.forceStopPackage(java.lang.String,int)void  ::  android.permission.FORCE_STOP_PACKAGES, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.getContentProviderExternal(java.lang.String,int,android.os.IBinder)android.app.IActivityManager$ContentProviderHolder  ::  android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
com.android.server.am.ActivityManagerService.getCurrentUser()android.content.pm.UserInfo  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.am.ActivityManagerService.getRecentTasks(int,int,int)java.util.List  ::  android.permission.GET_TASKS
com.android.server.am.ActivityManagerService.getRunningUserIds()I[]  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.am.ActivityManagerService.getTaskThumbnails(int)android.app.ActivityManager$TaskThumbnails  ::  android.permission.READ_FRAME_BUFFER
com.android.server.am.ActivityManagerService.getTaskTopThumbnail(int)android.graphics.Bitmap  ::  android.permission.READ_FRAME_BUFFER
com.android.server.am.ActivityManagerService.getTasks(int,int,android.app.IThumbnailReceiver)java.util.List  ::  android.permission.GET_TASKS
com.android.server.am.ActivityManagerService.getTopActivityExtras(int)android.os.Bundle  ::  android.permission.GET_TOP_ACTIVITY_INFO
com.android.server.am.ActivityManagerService.goingToSleep()void  ::  android.permission.DEVICE_POWER, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)void  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)boolean  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.hang(android.os.IBinder,boolean)void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.inputDispatchingTimedOut(int,boolean)long  ::  android.permission.FILTER_EVENTS, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.isUserRunning(int,boolean)boolean  ::  android.permission.INTERACT_ACROSS_USERS
com.android.server.am.ActivityManagerService.killAllBackgroundProcesses()void  ::  android.permission.KILL_BACKGROUND_PROCESSES, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.killBackgroundProcesses(java.lang.String,int)void  ::  android.permission.KILL_BACKGROUND_PROCESSES
com.android.server.am.ActivityManagerService.killUid(int,java.lang.String)void  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.moveActivityTaskToBack(android.os.IBinder,boolean)boolean  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.moveTaskBackwards(int)void  ::  android.permission.REORDER_TASKS
com.android.server.am.ActivityManagerService.moveTaskToBack(int)void  ::  android.permission.REORDER_TASKS
com.android.server.am.ActivityManagerService.moveTaskToFront(int,int,android.os.Bundle)void  ::  android.permission.REORDER_TASKS, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)boolean  ::  android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.profileControl(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor,int)boolean  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.registerProcessObserver(android.app.IProcessObserver)void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.registerUserSwitchObserver(android.app.IUserSwitchObserver)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.removeContentProviderExternal(java.lang.String,android.os.IBinder)void  ::  android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.removeSubTask(int,int)boolean  ::  android.permission.REMOVE_TASKS
com.android.server.am.ActivityManagerService.removeTask(int,int)boolean  ::  android.permission.REMOVE_TASKS
com.android.server.am.ActivityManagerService.requestBugReport()void  ::  android.permission.DUMP
com.android.server.am.ActivityManagerService.resumeAppSwitches()void  ::  android.permission.STOP_APP_SWITCHES
com.android.server.am.ActivityManagerService.setActivityController(android.app.IActivityController)void  ::  android.permission.SET_ACTIVITY_WATCHER
com.android.server.am.ActivityManagerService.setAlwaysFinish(boolean)void  ::  android.permission.SET_ALWAYS_FINISH
com.android.server.am.ActivityManagerService.setDebugApp(java.lang.String,boolean,boolean)void  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.setFrontActivityScreenCompatMode(int)void  ::  android.permission.SET_SCREEN_COMPATIBILITY, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.setLockScreenShown(boolean)void  ::  android.permission.DEVICE_POWER, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.setPackageAskScreenCompat(java.lang.String,boolean)void  ::  android.permission.SET_SCREEN_COMPATIBILITY
com.android.server.am.ActivityManagerService.setPackageScreenCompatMode(java.lang.String,int)void  ::  android.permission.SET_SCREEN_COMPATIBILITY, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.setProcessForeground(android.os.IBinder,int,boolean)void  ::  android.permission.SET_PROCESS_LIMIT, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.setProcessLimit(int)void  ::  android.permission.SET_PROCESS_LIMIT, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.setRequestedOrientation(android.os.IBinder,int)void  ::  android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.shutdown(int)boolean  ::  android.permission.SHUTDOWN, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.signalPersistentProcesses(int)void  ::  android.permission.SIGNAL_PERSISTENT_PROCESSES
com.android.server.am.ActivityManagerService.startActivities(android.app.IApplicationThread,java.lang.String,[android.content.Intent,[java.lang.String,android.os.IBinder,android.os.Bundle,int)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivityAndWait(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)android.app.IActivityManager$WaitResult  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)int  ::  android.permission.SET_DEBUG_APP
com.android.server.am.ActivityManagerService.startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)void  ::  android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.stopAppSwitches()void  ::  android.permission.START_ANY_ACTIVITY, android.permission.STOP_APP_SWITCHES
com.android.server.am.ActivityManagerService.stopUser(int,android.app.IStopUserCallback)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.switchUser(int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.am.ActivityManagerService.unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)void  ::  android.permission.BROADCAST_STICKY
com.android.server.am.ActivityManagerService.unhandledBack()void  ::  android.permission.FORCE_BACK
com.android.server.am.ActivityManagerService.unregisterReceiver(android.content.IIntentReceiver)void  ::  android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
com.android.server.am.ActivityManagerService.updateConfiguration(android.content.res.Configuration)void  ::  android.permission.CHANGE_CONFIGURATION
com.android.server.am.ActivityManagerService.updatePersistentConfiguration(android.content.res.Configuration)void  ::  android.permission.CHANGE_CONFIGURATION
com.android.server.am.ActivityManagerService.wakingUp()void  ::  android.permission.DEVICE_POWER, android.permission.START_ANY_ACTIVITY
com.android.server.am.BatteryStatsService.getAwakeTimeBattery()long  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.getAwakeTimePlugged()long  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.getStatistics()B[]  ::  android.permission.BATTERY_STATS
com.android.server.am.BatteryStatsService.noteBluetoothOff()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteBluetoothOn()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockAcquired(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockAcquiredFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockReleased(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteFullWifiLockReleasedFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteInputEvent()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteNetworkInterfaceType(java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneDataConnectionState(int,boolean)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneOff()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneOn()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneSignalStrength(android.telephony.SignalStrength)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.notePhoneState(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteScreenBrightness(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteScreenOff()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteScreenOn()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartGps(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartSensor(int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartWakelock(int,int,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopGps(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopSensor(int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopWakelock(int,int,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteUserActivity(int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteVibratorOff(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteVibratorOn(int,long)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastDisabled(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastDisabledFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastEnabled(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiMulticastEnabledFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiOff()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiOn()void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiRunning(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStarted(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStartedFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStopped(int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiScanStoppedFromSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.noteWifiStopped(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.BatteryStatsService.setBatteryState(int,int,int,int,int,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.UsageStatsService.getAllPkgUsageStats()com.android.internal.os.PkgUsageStats[]  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.am.UsageStatsService.getPkgUsageStats(android.content.ComponentName)com.android.internal.os.PkgUsageStats  ::  android.permission.PACKAGE_USAGE_STATS
com.android.server.am.UsageStatsService.noteLaunchTime(android.content.ComponentName,int)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.UsageStatsService.notePauseComponent(android.content.ComponentName)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.am.UsageStatsService.noteResumeComponent(android.content.ComponentName)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.content.ContentService.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.getCurrentSyncs()java.util.List  ::  android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.getIsSyncable(android.accounts.Account,java.lang.String)int  ::  android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getMasterSyncAutomatically()boolean  ::  android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getPeriodicSyncs(android.accounts.Account,java.lang.String)java.util.List  ::  android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getSyncAutomatically(android.accounts.Account,java.lang.String)boolean  ::  android.permission.READ_SYNC_SETTINGS
com.android.server.content.ContentService.getSyncStatus(android.accounts.Account,java.lang.String)android.content.SyncStatusInfo  ::  android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.isSyncActive(android.accounts.Account,java.lang.String)boolean  ::  android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.isSyncPending(android.accounts.Account,java.lang.String)boolean  ::  android.permission.READ_SYNC_STATS
com.android.server.content.ContentService.registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.content.ContentService.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setIsSyncable(android.accounts.Account,java.lang.String,int)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setMasterSyncAutomatically(boolean)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.content.ContentService.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)void  ::  android.permission.WRITE_SYNC_SETTINGS
com.android.server.display.DisplayManagerService.connectWifiDisplay(java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService.forgetWifiDisplay(java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.display.DisplayManagerService.renameWifiDisplay(java.lang.String,java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
com.android.server.dreams.DreamManagerService.awaken()void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.dreams.DreamManagerService.dream()void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.dreams.DreamManagerService.getDefaultDreamComponent()android.content.ComponentName  ::  android.permission.READ_DREAM_STATE
com.android.server.dreams.DreamManagerService.getDreamComponents()android.content.ComponentName[]  ::  android.permission.READ_DREAM_STATE
com.android.server.dreams.DreamManagerService.isDreaming()boolean  ::  android.permission.READ_DREAM_STATE
com.android.server.dreams.DreamManagerService.setDreamComponents([android.content.ComponentName)void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.dreams.DreamManagerService.testDream(android.content.ComponentName)void  ::  android.permission.WRITE_DREAM_STATE
com.android.server.input.InputManagerService.addKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
com.android.server.input.InputManagerService.removeKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
com.android.server.input.InputManagerService.setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
com.android.server.input.InputManagerService.tryPointerSpeed(int)void  ::  android.permission.SET_POINTER_SPEED
com.android.server.net.NetworkPolicyManagerService.getNetworkPolicies()android.net.NetworkPolicy[]  ::  android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PHONE_STATE
com.android.server.net.NetworkPolicyManagerService.getNetworkQuotaInfo(android.net.NetworkState)android.net.NetworkQuotaInfo  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.net.NetworkPolicyManagerService.getRestrictBackground()boolean  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.getUidPolicy(int)int  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.getUidsWithPolicy(int)I[]  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.isUidForeground(int)boolean  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.registerListener(android.net.INetworkPolicyListener)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.net.NetworkPolicyManagerService.setNetworkPolicies([android.net.NetworkPolicy)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.setRestrictBackground(boolean)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.setUidPolicy(int,int)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.snoozeLimit(android.net.NetworkTemplate)void  ::  android.permission.MANAGE_NETWORK_POLICY
com.android.server.net.NetworkPolicyManagerService.unregisterListener(android.net.INetworkPolicyListener)void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.net.NetworkStatsService.advisePersistThreshold(long)void  ::  android.permission.MODIFY_NETWORK_ACCOUNTING
com.android.server.net.NetworkStatsService.forceUpdate()void  ::  android.permission.READ_NETWORK_USAGE_HISTORY
com.android.server.net.NetworkStatsService.getDataLayerSnapshotForUid(int)android.net.NetworkStats  ::  android.permission.ACCESS_NETWORK_STATE
com.android.server.net.NetworkStatsService.getNetworkTotalBytes(android.net.NetworkTemplate,long,long)long  ::  android.permission.READ_NETWORK_USAGE_HISTORY
com.android.server.net.NetworkStatsService.incrementOperationCount(int,int,int)void  ::  android.permission.MODIFY_NETWORK_ACCOUNTING
com.android.server.net.NetworkStatsService.openSession()android.net.INetworkStatsSession  ::  android.permission.READ_NETWORK_USAGE_HISTORY
com.android.server.net.NetworkStatsService.setUidForeground(int,boolean)void  ::  android.permission.MODIFY_NETWORK_ACCOUNTING
com.android.server.pm.PackageManagerService.addPreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)void  ::  android.permission.CLEAR_APP_USER_DATA, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.clearPackagePreferredActivities(java.lang.String)void  ::  android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)void  ::  android.permission.DELETE_CACHE_FILES
com.android.server.pm.PackageManagerService.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void  ::  android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.extendVerificationTimeout(int,int,long)void  ::  android.permission.PACKAGE_VERIFICATION_AGENT
com.android.server.pm.PackageManagerService.freeStorage(long,android.content.IntentSender)void  ::  android.permission.CLEAR_APP_CACHE
com.android.server.pm.PackageManagerService.freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)void  ::  android.permission.CLEAR_APP_CACHE
com.android.server.pm.PackageManagerService.getActivityInfo(android.content.ComponentName,int,int)android.content.pm.ActivityInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getApplicationEnabledSetting(java.lang.String,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getApplicationInfo(java.lang.String,int,int)android.content.pm.ApplicationInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getComponentEnabledSetting(android.content.ComponentName,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getInstalledPackages(int,int)android.content.pm.ParceledListSlice  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getPackageInfo(java.lang.String,int,int)android.content.pm.PackageInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)void  ::  android.permission.GET_PACKAGE_SIZE
com.android.server.pm.PackageManagerService.getPackageUid(java.lang.String,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getProviderInfo(android.content.ComponentName,int,int)android.content.pm.ProviderInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getReceiverInfo(android.content.ComponentName,int,int)android.content.pm.ActivityInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getServiceInfo(android.content.ComponentName,int,int)android.content.pm.ServiceInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.getVerifierDeviceIdentity()android.content.pm.VerifierDeviceIdentity  ::  android.permission.PACKAGE_VERIFICATION_AGENT
com.android.server.pm.PackageManagerService.grantPermission(java.lang.String,java.lang.String)void  ::  android.permission.GRANT_REVOKE_PERMISSIONS
com.android.server.pm.PackageManagerService.installExistingPackageAsUser(java.lang.String,int)int  ::  android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)void  ::  android.permission.INSTALL_PACKAGES
com.android.server.pm.PackageManagerService.installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)void  ::  android.permission.INSTALL_PACKAGES
com.android.server.pm.PackageManagerService.installPackageWithVerificationAndEncryption(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.VerificationParams,android.content.pm.ContainerEncryptionParams)void  ::  android.permission.INSTALL_PACKAGES
com.android.server.pm.PackageManagerService.movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)void  ::  android.permission.MOVE_PACKAGE
com.android.server.pm.PackageManagerService.queryIntentActivities(android.content.Intent,java.lang.String,int,int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.queryIntentActivityOptions(android.content.ComponentName,[android.content.Intent,[java.lang.String,android.content.Intent,java.lang.String,int,int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.queryIntentReceivers(android.content.Intent,java.lang.String,int,int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.queryIntentServices(android.content.Intent,java.lang.String,int,int)java.util.List  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.replacePreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.resetPreferredActivities(int)void  ::  android.permission.SET_PREFERRED_APPLICATIONS
com.android.server.pm.PackageManagerService.resolveIntent(android.content.Intent,java.lang.String,int,int)android.content.pm.ResolveInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.resolveService(android.content.Intent,java.lang.String,int,int)android.content.pm.ResolveInfo  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.revokePermission(java.lang.String,java.lang.String)void  ::  android.permission.GRANT_REVOKE_PERMISSIONS
com.android.server.pm.PackageManagerService.setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.setComponentEnabledSetting(android.content.ComponentName,int,int,int)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.setInstallLocation(int)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.pm.PackageManagerService.setPackageStoppedState(java.lang.String,boolean,int)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.PackageManagerService.setPermissionEnforced(java.lang.String,boolean)void  ::  android.permission.GRANT_REVOKE_PERMISSIONS
com.android.server.pm.PackageManagerService.verifyPendingInstall(int,int)void  ::  android.permission.PACKAGE_VERIFICATION_AGENT
com.android.server.power.PowerManagerService.acquireWakeLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService.crash(java.lang.String)void  ::  android.permission.REBOOT
com.android.server.power.PowerManagerService.goToSleep(long,int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService.nap(long)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService.reboot(boolean,java.lang.String,boolean)void  ::  android.permission.REBOOT
com.android.server.power.PowerManagerService.releaseWakeLock(android.os.IBinder,int)void  ::  android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService.setAttentionLight(boolean,int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService.setStayOnSetting(int)void  ::  android.permission.WRITE_SETTINGS
com.android.server.power.PowerManagerService.setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService.setTemporaryScreenBrightnessSettingOverride(int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService.shutdown(boolean,boolean)void  ::  android.permission.REBOOT
com.android.server.power.PowerManagerService.updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
com.android.server.power.PowerManagerService.userActivity(long,int,int)void  ::  android.permission.DEVICE_POWER
com.android.server.power.PowerManagerService.wakeUp(long)void  ::  android.permission.DEVICE_POWER
com.android.server.sip.SipService.close(java.lang.String)void  ::  android.permission.USE_SIP
com.android.server.sip.SipService.createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)android.net.sip.ISipSession  ::  android.permission.USE_SIP
com.android.server.sip.SipService.getListOfProfiles()android.net.sip.SipProfile[]  ::  android.permission.USE_SIP
com.android.server.sip.SipService.getPendingSession(java.lang.String)android.net.sip.ISipSession  ::  android.permission.USE_SIP
com.android.server.sip.SipService.isOpened(java.lang.String)boolean  ::  android.permission.USE_SIP
com.android.server.sip.SipService.isRegistered(java.lang.String)boolean  ::  android.permission.USE_SIP
com.android.server.sip.SipService.open(android.net.sip.SipProfile)void  ::  android.permission.USE_SIP
com.android.server.sip.SipService.open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)void  ::  android.permission.USE_SIP
com.android.server.sip.SipService.setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)void  ::  android.permission.USE_SIP
com.android.server.usb.UsbService.allowUsbDebugging(boolean,java.lang.String)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.clearDefaults(java.lang.String,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.clearUsbDebuggingKeys()void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.denyUsbDebugging()void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.grantDevicePermission(android.hardware.usb.UsbDevice,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.hasDefaults(java.lang.String,int)boolean  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setCurrentFunction(java.lang.String,boolean)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)void  ::  android.permission.MANAGE_USB
com.android.server.usb.UsbService.setMassStorageBackingFile(java.lang.String)void  ::  android.permission.MANAGE_USB
com.android.server.wifi.WifiService.acquireMulticastLock(android.os.IBinder,java.lang.String)void  ::  android.permission.CHANGE_WIFI_MULTICAST_STATE
com.android.server.wifi.WifiService.acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)boolean  ::  android.permission.WAKE_LOCK
com.android.server.wifi.WifiService.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)int  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.addToBlacklist(java.lang.String)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.captivePortalCheckComplete()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiService.clearBlacklist()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.disableNetwork(int)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.disconnect()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.enableNetwork(int,boolean)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.getConfigFile()java.lang.String  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getConfiguredNetworks()java.util.List  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getConnectionInfo()android.net.wifi.WifiInfo  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getDhcpInfo()android.net.DhcpInfo  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getFrequencyBand()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getScanResults(java.lang.String)java.util.List  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getWifiApConfiguration()android.net.wifi.WifiConfiguration  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getWifiApEnabledState()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getWifiEnabledState()int  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.getWifiServiceMessenger()android.os.Messenger  ::  android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.getWifiStateMachineMessenger()android.os.Messenger  ::  android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.initializeMulticastFiltering()void  ::  android.permission.CHANGE_WIFI_MULTICAST_STATE
com.android.server.wifi.WifiService.isMulticastEnabled()boolean  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.isScanAlwaysAvailable()boolean  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.pingSupplicant()boolean  ::  android.permission.ACCESS_WIFI_STATE
com.android.server.wifi.WifiService.reassociate()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.reconnect()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.releaseMulticastLock()void  ::  android.permission.CHANGE_WIFI_MULTICAST_STATE
com.android.server.wifi.WifiService.releaseWifiLock(android.os.IBinder)boolean  ::  android.permission.WAKE_LOCK
com.android.server.wifi.WifiService.removeNetwork(int)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.saveConfiguration()boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.setCountryCode(java.lang.String,boolean)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.setFrequencyBand(int,boolean)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.setWifiApConfiguration(android.net.wifi.WifiConfiguration)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.setWifiEnabled(boolean)boolean  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.startScan()void  ::  android.permission.CHANGE_WIFI_STATE
com.android.server.wifi.WifiService.startWifi()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiService.stopWifi()void  ::  android.permission.CONNECTIVITY_INTERNAL
com.android.server.wifi.WifiService.updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
com.android.server.wm.WindowManagerService.addAppToken(int,android.view.IApplicationToken,int,int,boolean,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.addWindowToken(android.os.IBinder,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.clearForcedDisplayDensity(int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.clearForcedDisplaySize(int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.disableKeyguard(android.os.IBinder,java.lang.String)void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.dismissKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.executeAppTransition()void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(android.view.IOnKeyguardExitResult)void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.freezeRotation(int)void  ::  android.permission.SET_ORIENTATION
com.android.server.wm.WindowManagerService.getCompatibleMagnificationSpecForWindow(android.os.IBinder)android.view.MagnificationSpec  ::  android.permission.MAGNIFY_DISPLAY
com.android.server.wm.WindowManagerService.getFocusedWindowToken()android.os.IBinder  ::  android.permission.RETRIEVE_WINDOW_INFO
com.android.server.wm.WindowManagerService.getWindowFrame(android.os.IBinder,android.graphics.Rect)void  ::  android.permission.RETRIEVE_WINDOW_INFO
com.android.server.wm.WindowManagerService.isViewServerRunning()boolean  ::  android.permission.DUMP
com.android.server.wm.WindowManagerService.moveAppToken(int,android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.moveAppTokensToBottom(java.util.List)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.moveAppTokensToTop(java.util.List)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.pauseKeyDispatching(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.prepareAppTransition(int,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.reenableKeyguard(android.os.IBinder)void  ::  android.permission.DISABLE_KEYGUARD
com.android.server.wm.WindowManagerService.removeAppToken(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.removeWindowToken(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.resumeKeyDispatching(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.screenshotApplications(android.os.IBinder,int,int,int)android.graphics.Bitmap  ::  android.permission.READ_FRAME_BUFFER
com.android.server.wm.WindowManagerService.setAnimationScale(int,float)void  ::  android.permission.SET_ANIMATION_SCALE
com.android.server.wm.WindowManagerService.setAnimationScales([float)void  ::  android.permission.SET_ANIMATION_SCALE
com.android.server.wm.WindowManagerService.setAppGroupId(android.os.IBinder,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setAppOrientation(android.view.IApplicationToken,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setAppVisibility(android.os.IBinder,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setAppWillBeHidden(android.os.IBinder)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setEventDispatching(boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setFocusedApp(android.os.IBinder,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setForcedDisplayDensity(int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.setForcedDisplaySize(int,int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.setInputFilter(android.view.IInputFilter)void  ::  android.permission.FILTER_EVENTS
com.android.server.wm.WindowManagerService.setMagnificationCallbacks(android.view.IMagnificationCallbacks)void  ::  android.permission.MAGNIFY_DISPLAY
com.android.server.wm.WindowManagerService.setMagnificationSpec(android.view.MagnificationSpec)void  ::  android.permission.MAGNIFY_DISPLAY
com.android.server.wm.WindowManagerService.setNewConfiguration(android.content.res.Configuration)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.setOverscan(int,int,int,int,int)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.wm.WindowManagerService.showAssistant()void  ::  android.permission.DEVICE_POWER
com.android.server.wm.WindowManagerService.startAppFreezingScreen(android.os.IBinder,int)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.startFreezingScreen(int,int)void  ::  android.permission.FREEZE_SCREEN
com.android.server.wm.WindowManagerService.startViewServer(int)boolean  ::  android.permission.DUMP
com.android.server.wm.WindowManagerService.statusBarVisibilityChanged(int)void  ::  android.permission.STATUS_BAR
com.android.server.wm.WindowManagerService.stopAppFreezingScreen(android.os.IBinder,boolean)void  ::  android.permission.MANAGE_APP_TOKENS
com.android.server.wm.WindowManagerService.stopFreezingScreen()void  ::  android.permission.FREEZE_SCREEN
com.android.server.wm.WindowManagerService.stopViewServer()boolean  ::  android.permission.DUMP
com.android.server.wm.WindowManagerService.thawRotation()void  ::  android.permission.SET_ORIENTATION
com.android.server.wm.WindowManagerService.updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)android.content.res.Configuration  ::  android.permission.MANAGE_APP_TOKENS
com.ti.server.StubFmService.resumeFm()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxChangeAudioTarget(int,int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxChangeDigitalTargetConfiguration(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxCompleteScan_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxDisable()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxDisableAudioRouting()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxDisableRds()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxDisableRds_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxEnable()boolean  ::  ti.permission.FMRX, ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxEnableAudioRouting()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxEnableRds()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxEnableRds_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetBand()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetBand_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetChannelSpacing()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetChannelSpacing_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetCompleteScanProgress()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetCompleteScanProgress_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetDeEmphasisFilter()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetDeEmphasisFilter_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetFMState()int  ::  ti.permission.FMRX
com.ti.server.StubFmService.rxGetFwVersion()double  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetMonoStereoMode()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetMonoStereoMode_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetMuteMode()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetMuteMode_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRdsAfSwitchMode()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRdsAfSwitchMode_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRdsGroupMask()long  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRdsGroupMask_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRdsSystem()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRdsSystem_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRfDependentMuteMode()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRfDependentMuteMode_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRssi()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRssiThreshold()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRssiThreshold_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetRssi_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetTunedFrequency()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetTunedFrequency_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetVolume()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxGetVolume_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxIsEnabled()boolean  ::  ti.permission.FMRX
com.ti.server.StubFmService.rxIsFMPaused()boolean  ::  ti.permission.FMRX
com.ti.server.StubFmService.rxIsValidChannel()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSeek_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetBand(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetBand_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetChannelSpacing(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetChannelSpacing_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetDeEmphasisFilter(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetDeEmphasisFilter_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetMonoStereoMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetMonoStereoMode_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetMuteMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetMuteMode_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRdsAfSwitchMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRdsAfSwitchMode_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRdsGroupMask(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRdsGroupMask_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRdsSystem(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRdsSystem_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRfDependentMuteMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRfDependentMuteMode_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRssiThreshold(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetRssiThreshold_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxSetVolume(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxStopCompleteScan()int  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxStopCompleteScan_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxStopSeek()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxStopSeek_nb()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.rxTune_nb(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txChangeAudioSource(int,int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txChangeDigitalSourceConfiguration(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txDisable()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txDisableRds()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txEnable()boolean  ::  ti.permission.FMRX, ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txEnableRds()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txGetFMState()int  ::  ti.permission.FMRX
com.ti.server.StubFmService.txSetMonoStereoMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetMuteMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetPowerLevel(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetPreEmphasisFilter(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsAfCode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsECC(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsMusicSpeechFlag(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsPiCode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsPsDisplayMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsPsScrollSpeed(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsPtyCode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsTextPsMsg(java.lang.String)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsTextRepertoire(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsTextRtMsg(int,java.lang.String,int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsTrafficCodes(int,int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsTransmissionMode(int)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txSetRdsTransmittedGroupsMask(long)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txStartTransmission()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txStopTransmission()boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txTune(long)boolean  ::  ti.permission.FMRX_ADMIN
com.ti.server.StubFmService.txWriteRdsRawData(java.lang.String)boolean  ::  ti.permission.FMRX_ADMIN
