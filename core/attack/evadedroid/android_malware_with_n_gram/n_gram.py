# -*- coding: utf-8 -*-
"""

This tool that is presented in [1] has been extended to use in EvadeDroid. 
The original operation of the tool was extracting n-grams from APK; 
however, it has been extended for use in the EvadeDroid's pipeline by adding various functionalities.
~~~~~~~~

Created on Fri Feb  9 13:26:50 2018

@author: 燃烧杯
词集模型

https://github.com/DQinYuan/AndroidMalwareWithN-gram
"""


import pandas as pd
from core.attack.evadedroid.settings import config as evadedroid_config
from core.attack.evadedroid.android_malware_with_n_gram.infrastructure.mydict import MyDict
import os
import pickle


def extract_n_gram(n, apks):
    print("n = ", n)
    '''
    apks = dict()
    for i in range(0,len(model.m_train)):        
        apks[os.path.basename(model.m_train[i]['sample_path'])] = model.y_train[i]
    
    '''
    origin = pd.read_csv(evadedroid_config['project_root'] + "/android_malware_with_n_gram/data.csv")
    mdict = MyDict()    
    feature = origin["Feature"].str.split("|")
    total = len(feature)
    
    for i, code in enumerate(feature):
        mdict.newLayer()
        if not type(code) == list:
            continue
        for method in code:
            length = len(method)
            if length < n:
                continue
            for start in range(length - (n - 1)):
                end = start + n
                mdict.mark(method[start:end])
        print("completed", i, "Applications, the percentages are as follows：")
        print((i + 1) * 100 / total, "%")
                
    result = mdict.dict
    app_name = origin["SoftwareName"].tolist()
    n_gram_features_malware = dict()
    n_gram_features_goodware = dict()
    for i in range(0,len(app_name)):
        features = [val[i] for val in result.values()]
        if apks[app_name[i]] == 1:
            n_gram_features_malware[app_name[i]] = features
        else:
            n_gram_features_goodware[app_name[i]] = features
    pd.DataFrame(result, index=origin.index)\
                   .to_csv(evadedroid_config['project_root'] + "/android_malware_with_n_gram/" + str(n) + "_gram.csv", index=False)
    
    
    n_gram_features_goodware_path = evadedroid_config["stored_components"]+'n_gram_features_goodware.p'
    with open(n_gram_features_goodware_path, 'wb') as f:
        pickle.dump(n_gram_features_goodware, f)  
    
    donors = dict()
    no = 0
    for malware in n_gram_features_malware.keys():
        no += 1
        max_similarity = 0
        malware_n_gram = n_gram_features_malware[malware]
        for goodware in n_gram_features_goodware.keys():
            goodware_n_gram = n_gram_features_goodware[goodware]           
            cmp = [val == goodware_n_gram[ind] for ind,val in enumerate(malware_n_gram) if malware_n_gram[ind] == 1] #goodware_n_gram intersect malware_n_gram
            intersect_size = sum(cmp)          
            if sum(goodware_n_gram)  == 0:
                continue
            similarity = intersect_size/sum(goodware_n_gram) #Containment goodware in malware
            if max_similarity < similarity:
                max_similarity = similarity
                donors[malware] = goodware  
        print("No %(no)s - similarity between malware(%(malware)s) and goodware(%(goodware)s) is %(sim)s" %{"no": str(no), "malware": malware, "goodware": donors[malware], "sim":str(max_similarity)})
    donors_path = evadedroid_config["stored_components"]+'donors.p'
    with open(donors_path, 'wb') as f:
        pickle.dump(donors, f)        
            

#We should try to simulate malware sample to benign sample in contrast to finding the most similar benign app in previous step
def extract_n_gram_adv(n,post_op_host):
    print("n = ", n)      
    header = pd.read_csv(evadedroid_config['project_root'] + "/android_malware_with_n_gram/%s_gram.csv"%(n))
    origin_path = evadedroid_config['project_root'] + "/android_malware_with_n_gram/data_%s.csv"%(os.path.splitext(os.path.basename(post_op_host))[0])
    origin = pd.read_csv(origin_path)       
    mdict = MyDict()    
    feature = origin["Feature"].str.split("|")
    total = len(feature)
    
    for i, code in enumerate(feature):
        mdict.newLayer()
        if not type(code) == list:
            continue
        for method in code:
            length = len(method)
            if length < n:
                continue
            for start in range(length - (n - 1)):
                end = start + n
                mdict.mark(method[start:end])
        print("completed", i, "Applications, the percentages are as follows：")
        print((i + 1) * 100 / total, "%")
                
    result = mdict.dict
    malware_n_gram_dict = dict()
    for _,column in enumerate(header.columns):
        if result.get(column) != None:
            malware_n_gram_dict[column] = result[column][0]
        else:
            malware_n_gram_dict[column] = 0
    
    malware_n_gram = [val for val in malware_n_gram_dict.values()]
    
    n_gram_features_goodware_path = evadedroid_config["stored_components"]+'n_gram_features_goodware.p'
    with open(n_gram_features_goodware_path, 'rb') as f:
        n_gram_features_goodware = pickle.load(f)     
    
    max_similarity = 0   
    for goodware in n_gram_features_goodware.keys():
        goodware_n_gram = n_gram_features_goodware[goodware]       
        cmp = [val == goodware_n_gram[ind] for ind,val in enumerate(malware_n_gram) if malware_n_gram[ind] == 1] #goodware_n_gram intersect malware_n_gram
        intersect_size = sum(cmp)       
        if sum(goodware_n_gram)  == 0:
            continue
        similarity = intersect_size/sum(goodware_n_gram) #Containment goodware in malware       
        if max_similarity < similarity:
            max_similarity = similarity  
    print("origin:" , origin_path)
    os.remove(origin_path)
    return max_similarity
        
        

